
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is PROJECTEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using SISMONRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace SISMONRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class PROJECT : Objects.PROJECTObject, IMappeablePROJECT, IEquatable<PROJECT>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public PROJECT()
            :base()
        {
            if (_PERMISSIONCollection == null) _PERMISSIONCollection = new Entities.PERMISSIONList();
if (_STATUSEntity == null) _STATUSEntity = new Objects.STATUSObject();
if (_USEREntity == null) _USEREntity = new Objects.USERObject();

        }

        /// <summary>
        /// 
        /// </summary>
        public PROJECT(
			System.Int32 Id_Project)
            : base()
        {

			_Id_Project = Id_Project;

            if (_PERMISSIONCollection == null) _PERMISSIONCollection = new Entities.PERMISSIONList();
if (_STATUSEntity == null) _STATUSEntity = new Objects.STATUSObject();
if (_USEREntity == null) _USEREntity = new Objects.USERObject();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public PROJECT(
			System.Int32 Id_Project,
			System.String Name,
			System.Int32 Id_Owner,
			System.Byte Id_Status,
			System.String STATUSString,
			System.String USERString)
            : base()
        {

			_Id_Project = Id_Project;
			_Name = Name;
			_Id_Owner = Id_Owner;
			_Id_Status = Id_Status;
			_STATUSString = STATUSString;
			_USERString = USERString;

            if (_PERMISSIONCollection == null) _PERMISSIONCollection = new Entities.PERMISSIONList();
if (_STATUSEntity == null) _STATUSEntity = new Objects.STATUSObject();
if (_USEREntity == null) _USEREntity = new Objects.USERObject();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.PERMISSIONList _PERMISSIONCollection;
/// <summary>
/// 
/// </summary>
protected Objects.STATUSObject _STATUSEntity;
/// <summary>
/// 
/// </summary>
protected Objects.USERObject _USEREntity;

        #endregion

        #region "Properties"
        

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.PERMISSIONList PERMISSIONCollection
        {
            get
            {
                if (_PERMISSIONCollection== null) {
  		 ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(PERMISSION));
 _PERMISSIONCollection = lazyProvider.GetList(typeof(PERMISSION), this) as PERMISSIONList;
 }
                return _PERMISSIONCollection;
            }
            set
            {
                base.PropertyModified();
                _PERMISSIONCollection = value;
                
            }
        }
        
bool _STATUSEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.STATUSObject STATUSEntity
        {
            get
            {
                if (_STATUSEntity== null  && ! _STATUSEntityFetched ) {
_STATUSEntityFetched = true;
Objects.STATUSObject _STATUSEntityTemp = new Objects.STATUSObject(this.Id_Status); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.STATUSObject));
 _STATUSEntity = lazyProvider.GetEntity(typeof(Objects.STATUSObject), _STATUSEntityTemp) as Objects.STATUSObject;
}

                return _STATUSEntity;
            }
            set
            {
                base.PropertyModified();
                _STATUSEntity = value;
                if (value != null) {
   _Id_Status = value.Id_Status;
_STATUSString = value.Description;
} else {
   _Id_Status = System.Byte.MinValue;
_STATUSString = "";
}

            }
        }
        
bool _USEREntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.USERObject USEREntity
        {
            get
            {
                if (_USEREntity== null  && ! _USEREntityFetched ) {
_USEREntityFetched = true;
Objects.USERObject _USEREntityTemp = new Objects.USERObject(this.Id_Owner); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.USERObject));
 _USEREntity = lazyProvider.GetEntity(typeof(Objects.USERObject), _USEREntityTemp) as Objects.USERObject;
}

                return _USEREntity;
            }
            set
            {
                base.PropertyModified();
                _USEREntity = value;
                if (value != null) {
   _Id_Owner = value.Id_User;
_USERString = value.Full_Name;
} else {
   _Id_Owner = System.Int32.MinValue;
_USERString = "";
}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new PROJECT OriginalValue()
        {
            return (PROJECT)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            PROJECT newObject;            
            SISMONRules.Entities.PERMISSIONList newPERMISSIONCollection;


            newObject = (PROJECT)this.MemberwiseClone();
            // Entities
                         
            if (this._STATUSEntity != null)
            {
                newObject._STATUSEntity = (Objects.STATUSObject)((ICloneable)this._STATUSEntity).Clone();
            }
                         
            if (this._USEREntity != null)
            {
                newObject._USEREntity = (Objects.USERObject)((ICloneable)this._USEREntity).Clone();
            }
            
            // Colections
            
            if (this._PERMISSIONCollection != null)
            {
                
                newPERMISSIONCollection = new SISMONRules.Entities.PERMISSIONList();
                
                foreach (SISMONRules.Entities.PERMISSION row in this._PERMISSIONCollection)
                { 
                    newPERMISSIONCollection.Add((SISMONRules.Entities.PERMISSION)((ICloneable) row).Clone());
                }
                newObject._PERMISSIONCollection = newPERMISSIONCollection;
            }
            
            // OriginalValue
            PROJECT newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (PROJECT)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._STATUSEntity != null)
                {
                    newOriginalValue._STATUSEntity = (Objects.STATUSObject)((ICloneable)this.OriginalValue()._STATUSEntity).Clone();
                }
                             
                if (this.OriginalValue()._USEREntity != null)
                {
                    newOriginalValue._USEREntity = (Objects.USERObject)((ICloneable)this.OriginalValue()._USEREntity).Clone();
                }
                
                // Colections
                
                if (this.OriginalValue()._PERMISSIONCollection != null)
                {
                    
                    newPERMISSIONCollection = new SISMONRules.Entities.PERMISSIONList();
                    
                    foreach (SISMONRules.Entities.PERMISSION row in this.OriginalValue()._PERMISSIONCollection)
                    {
                        newPERMISSIONCollection.Add((SISMONRules.Entities.PERMISSION)((ICloneable)row).Clone());
                    }
                    newOriginalValue._PERMISSIONCollection = newPERMISSIONCollection;
                }                
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeablePROJECT.CompleteEntity(Entities.PERMISSIONList PERMISSIONCollection, Objects.STATUSObject STATUSEntity, Objects.USERObject USEREntity)
        {
        _PERMISSIONCollection = PERMISSIONCollection;
_STATUSEntity = STATUSEntity;
_USEREntity = USEREntity;
        }
        
        bool IMappeablePROJECT.IsPERMISSIONCollectionNull()
        {
            return (_PERMISSIONCollection == null);
        }
        
        bool IMappeablePROJECT.IsSTATUSEntityNull()
        {
            return (_STATUSEntity == null);
        }
        
        bool IMappeablePROJECT.IsUSEREntityNull()
        {
            return (_USEREntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeablePROJECT.SetFKValuesForChilds(PROJECT entity)
        {
        
            if (_PERMISSIONCollection != null)
            {
                
                foreach (SISMONRules.Entities.PERMISSION item in _PERMISSIONCollection)
                {
                        
                        
                        
                        
                    if ( item.Id_Project != entity.Id_Project) item.Id_Project = entity.Id_Project;
                    
                }
            }
                    
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(PROJECT other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeablePROJECT
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.PERMISSIONList PERMISSIONCollection, Objects.STATUSObject STATUSEntity, Objects.USERObject USEREntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsPERMISSIONCollectionNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsSTATUSEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsUSEREntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(PROJECT entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class PROJECTList : ObjectList<PROJECT>
    {
    }
}
namespace SISMONRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class PROJECTListView
        : ObjectListView<Entities.PROJECT>
    {
        /// <summary>
        /// 
        /// </summary>
        public PROJECTListView(Entities.PROJECTList list): base(list)
        {
        }
    }
}


