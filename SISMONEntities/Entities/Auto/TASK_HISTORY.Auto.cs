
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is TASK_HISTORYEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using SISMONRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace SISMONRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class TASK_HISTORY : Objects.TASK_HISTORYObject, IMappeableTASK_HISTORY, IEquatable<TASK_HISTORY>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public TASK_HISTORY()
            :base()
        {
            if (_TASKEntity == null) _TASKEntity = new Objects.TASKObject();

        }

        /// <summary>
        /// 
        /// </summary>
        public TASK_HISTORY(
			System.Int32 Id_Task_History)
            : base()
        {

			_Id_Task_History = Id_Task_History;

            if (_TASKEntity == null) _TASKEntity = new Objects.TASKObject();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public TASK_HISTORY(
			System.Int32 Id_Task_History,
			System.Int32 Id_Task,
			System.String Change_Reason,
			System.DateTime Change_Date)
            : base()
        {

			_Id_Task_History = Id_Task_History;
			_Id_Task = Id_Task;
			_Change_Reason = Change_Reason;
			_Change_Date = Change_Date;

            if (_TASKEntity == null) _TASKEntity = new Objects.TASKObject();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Objects.TASKObject _TASKEntity;

        #endregion

        #region "Properties"
        
bool _TASKEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.TASKObject TASKEntity
        {
            get
            {
                if (_TASKEntity== null  && ! _TASKEntityFetched ) {
_TASKEntityFetched = true;
Objects.TASKObject _TASKEntityTemp = new Objects.TASKObject(this.Id_Task); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.TASKObject));
 _TASKEntity = lazyProvider.GetEntity(typeof(Objects.TASKObject), _TASKEntityTemp) as Objects.TASKObject;
}

                return _TASKEntity;
            }
            set
            {
                base.PropertyModified();
                _TASKEntity = value;
                if (value != null) {
   _Id_Task = value.Id_Task;

} else {
   _Id_Task = System.Int32.MinValue;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new TASK_HISTORY OriginalValue()
        {
            return (TASK_HISTORY)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            TASK_HISTORY newObject;            
            

            newObject = (TASK_HISTORY)this.MemberwiseClone();
            // Entities
                         
            if (this._TASKEntity != null)
            {
                newObject._TASKEntity = (Objects.TASKObject)((ICloneable)this._TASKEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            TASK_HISTORY newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (TASK_HISTORY)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._TASKEntity != null)
                {
                    newOriginalValue._TASKEntity = (Objects.TASKObject)((ICloneable)this.OriginalValue()._TASKEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableTASK_HISTORY.CompleteEntity(Objects.TASKObject TASKEntity)
        {
        _TASKEntity = TASKEntity;
        }
        
        bool IMappeableTASK_HISTORY.IsTASKEntityNull()
        {
            return (_TASKEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableTASK_HISTORY.SetFKValuesForChilds(TASK_HISTORY entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(TASK_HISTORY other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableTASK_HISTORY
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Objects.TASKObject TASKEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsTASKEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(TASK_HISTORY entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class TASK_HISTORYList : ObjectList<TASK_HISTORY>
    {
    }
}
namespace SISMONRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class TASK_HISTORYListView
        : ObjectListView<Entities.TASK_HISTORY>
    {
        /// <summary>
        /// 
        /// </summary>
        public TASK_HISTORYListView(Entities.TASK_HISTORYList list): base(list)
        {
        }
    }
}


