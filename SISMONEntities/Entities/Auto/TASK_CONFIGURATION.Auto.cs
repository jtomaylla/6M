
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is TASK_CONFIGURATIONEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using SISMONRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace SISMONRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class TASK_CONFIGURATION : Objects.TASK_CONFIGURATIONObject, IMappeableTASK_CONFIGURATION, IEquatable<TASK_CONFIGURATION>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public TASK_CONFIGURATION()
            :base()
        {
            if (_TASK_ATTACHMENTCollection == null) _TASK_ATTACHMENTCollection = new Entities.TASK_ATTACHMENTList();
if (_TASKEntity == null) _TASKEntity = new Objects.TASKObject();

        }

        /// <summary>
        /// 
        /// </summary>
        public TASK_CONFIGURATION(
			System.Int32 Id_Task_Configuration)
            : base()
        {

			_Id_Task_Configuration = Id_Task_Configuration;

            if (_TASK_ATTACHMENTCollection == null) _TASK_ATTACHMENTCollection = new Entities.TASK_ATTACHMENTList();
if (_TASKEntity == null) _TASKEntity = new Objects.TASKObject();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public TASK_CONFIGURATION(
			System.Int32 Id_Task_Configuration,
			System.Int32 Id_Task,
			System.String Document_Title,
			System.Boolean Required,
			System.Byte Id_Status)
            : base()
        {

			_Id_Task_Configuration = Id_Task_Configuration;
			_Id_Task = Id_Task;
			_Document_Title = Document_Title;
			_Required = Required;
			_Id_Status = Id_Status;

            if (_TASK_ATTACHMENTCollection == null) _TASK_ATTACHMENTCollection = new Entities.TASK_ATTACHMENTList();
if (_TASKEntity == null) _TASKEntity = new Objects.TASKObject();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.TASK_ATTACHMENTList _TASK_ATTACHMENTCollection;
/// <summary>
/// 
/// </summary>
protected Objects.TASKObject _TASKEntity;

        #endregion

        #region "Properties"
        

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.TASK_ATTACHMENTList TASK_ATTACHMENTCollection
        {
            get
            {
                if (_TASK_ATTACHMENTCollection== null) {
  		 ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(TASK_ATTACHMENT));
 _TASK_ATTACHMENTCollection = lazyProvider.GetList(typeof(TASK_ATTACHMENT), this) as TASK_ATTACHMENTList;
 }
                return _TASK_ATTACHMENTCollection;
            }
            set
            {
                base.PropertyModified();
                _TASK_ATTACHMENTCollection = value;
                
            }
        }
        
bool _TASKEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.TASKObject TASKEntity
        {
            get
            {
                if (_TASKEntity== null  && ! _TASKEntityFetched ) {
_TASKEntityFetched = true;
Objects.TASKObject _TASKEntityTemp = new Objects.TASKObject(this.Id_Task); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.TASKObject));
 _TASKEntity = lazyProvider.GetEntity(typeof(Objects.TASKObject), _TASKEntityTemp) as Objects.TASKObject;
}

                return _TASKEntity;
            }
            set
            {
                base.PropertyModified();
                _TASKEntity = value;
                if (value != null) {
   _Id_Task = value.Id_Task;

} else {
   _Id_Task = System.Int32.MinValue;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new TASK_CONFIGURATION OriginalValue()
        {
            return (TASK_CONFIGURATION)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            TASK_CONFIGURATION newObject;            
            SISMONRules.Entities.TASK_ATTACHMENTList newTASK_ATTACHMENTCollection;


            newObject = (TASK_CONFIGURATION)this.MemberwiseClone();
            // Entities
                         
            if (this._TASKEntity != null)
            {
                newObject._TASKEntity = (Objects.TASKObject)((ICloneable)this._TASKEntity).Clone();
            }
            
            // Colections
            
            if (this._TASK_ATTACHMENTCollection != null)
            {
                
                newTASK_ATTACHMENTCollection = new SISMONRules.Entities.TASK_ATTACHMENTList();
                
                foreach (SISMONRules.Entities.TASK_ATTACHMENT row in this._TASK_ATTACHMENTCollection)
                { 
                    newTASK_ATTACHMENTCollection.Add((SISMONRules.Entities.TASK_ATTACHMENT)((ICloneable) row).Clone());
                }
                newObject._TASK_ATTACHMENTCollection = newTASK_ATTACHMENTCollection;
            }
            
            // OriginalValue
            TASK_CONFIGURATION newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (TASK_CONFIGURATION)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._TASKEntity != null)
                {
                    newOriginalValue._TASKEntity = (Objects.TASKObject)((ICloneable)this.OriginalValue()._TASKEntity).Clone();
                }
                
                // Colections
                
                if (this.OriginalValue()._TASK_ATTACHMENTCollection != null)
                {
                    
                    newTASK_ATTACHMENTCollection = new SISMONRules.Entities.TASK_ATTACHMENTList();
                    
                    foreach (SISMONRules.Entities.TASK_ATTACHMENT row in this.OriginalValue()._TASK_ATTACHMENTCollection)
                    {
                        newTASK_ATTACHMENTCollection.Add((SISMONRules.Entities.TASK_ATTACHMENT)((ICloneable)row).Clone());
                    }
                    newOriginalValue._TASK_ATTACHMENTCollection = newTASK_ATTACHMENTCollection;
                }                
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableTASK_CONFIGURATION.CompleteEntity(Entities.TASK_ATTACHMENTList TASK_ATTACHMENTCollection, Objects.TASKObject TASKEntity)
        {
        _TASK_ATTACHMENTCollection = TASK_ATTACHMENTCollection;
_TASKEntity = TASKEntity;
        }
        
        bool IMappeableTASK_CONFIGURATION.IsTASK_ATTACHMENTCollectionNull()
        {
            return (_TASK_ATTACHMENTCollection == null);
        }
        
        bool IMappeableTASK_CONFIGURATION.IsTASKEntityNull()
        {
            return (_TASKEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableTASK_CONFIGURATION.SetFKValuesForChilds(TASK_CONFIGURATION entity)
        {
        
            if (_TASK_ATTACHMENTCollection != null)
            {
                
                foreach (SISMONRules.Entities.TASK_ATTACHMENT item in _TASK_ATTACHMENTCollection)
                {
                        
                        
                        
                        
                    if ( item.Id_Task_Configuration != entity.Id_Task_Configuration) item.Id_Task_Configuration = entity.Id_Task_Configuration;
                    
                }
            }
                    
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(TASK_CONFIGURATION other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableTASK_CONFIGURATION
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.TASK_ATTACHMENTList TASK_ATTACHMENTCollection, Objects.TASKObject TASKEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsTASK_ATTACHMENTCollectionNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsTASKEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(TASK_CONFIGURATION entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class TASK_CONFIGURATIONList : ObjectList<TASK_CONFIGURATION>
    {
    }
}
namespace SISMONRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class TASK_CONFIGURATIONListView
        : ObjectListView<Entities.TASK_CONFIGURATION>
    {
        /// <summary>
        /// 
        /// </summary>
        public TASK_CONFIGURATIONListView(Entities.TASK_CONFIGURATIONList list): base(list)
        {
        }
    }
}


