
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is TASKEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using SISMONRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace SISMONRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class TASK : Objects.TASKObject, IMappeableTASK, IEquatable<TASK>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public TASK()
            :base()
        {
            if (_RESOURCECollection == null) _RESOURCECollection = new Entities.RESOURCEList();
if (_TASK_CONFIGURATIONCollection == null) _TASK_CONFIGURATIONCollection = new Entities.TASK_CONFIGURATIONList();
if (_PROJECTEntity == null) _PROJECTEntity = new Objects.PROJECTObject();
if (_STATUSEntity == null) _STATUSEntity = new Objects.STATUSObject();

        }

        /// <summary>
        /// 
        /// </summary>
        public TASK(
			System.Int32 Id_Task)
            : base()
        {

			_Id_Task = Id_Task;

            if (_RESOURCECollection == null) _RESOURCECollection = new Entities.RESOURCEList();
if (_TASK_CONFIGURATIONCollection == null) _TASK_CONFIGURATIONCollection = new Entities.TASK_CONFIGURATIONList();
if (_PROJECTEntity == null) _PROJECTEntity = new Objects.PROJECTObject();
if (_STATUSEntity == null) _STATUSEntity = new Objects.STATUSObject();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public TASK(
			System.Int32 Id_Task,
			System.Nullable<System.Int32> Id_Task_Parent,
			System.Int32 Id_Project,
			System.String Title,
			System.Nullable<System.Decimal> Initial_Cost,
			System.DateTime Start,
			System.DateTime End,
			System.Nullable<System.Decimal> Final_Cost,
			System.Nullable<System.DateTime> Final_End,
			System.Decimal Percent_Complete,
			System.Nullable<System.Boolean> Expanded,
			System.Boolean Summary,
			System.Nullable<System.Int32> Alert_Days_From_End,
			System.Int32 Order,
			System.Byte Id_Status,
			System.Boolean Replaced_Cost,
			System.String Description,
			System.Boolean EmailAlert,
			System.String PROJECTString,
			System.String STATUSString)
            : base()
        {

			_Id_Task = Id_Task;
			_Id_Task_Parent = Id_Task_Parent;
			_Id_Project = Id_Project;
			_Title = Title;
			_Initial_Cost = Initial_Cost;
			_Start = Start;
			_End = End;
			_Final_Cost = Final_Cost;
			_Final_End = Final_End;
			_Percent_Complete = Percent_Complete;
			_Expanded = Expanded;
			_Summary = Summary;
			_Alert_Days_From_End = Alert_Days_From_End;
			_Order = Order;
			_Id_Status = Id_Status;
			_Replaced_Cost = Replaced_Cost;
			_Description = Description;
			_EmailAlert = EmailAlert;
			_PROJECTString = PROJECTString;
			_STATUSString = STATUSString;

            if (_RESOURCECollection == null) _RESOURCECollection = new Entities.RESOURCEList();
if (_TASK_CONFIGURATIONCollection == null) _TASK_CONFIGURATIONCollection = new Entities.TASK_CONFIGURATIONList();
if (_PROJECTEntity == null) _PROJECTEntity = new Objects.PROJECTObject();
if (_STATUSEntity == null) _STATUSEntity = new Objects.STATUSObject();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.RESOURCEList _RESOURCECollection;
/// <summary>
/// 
/// </summary>
protected Entities.TASK_CONFIGURATIONList _TASK_CONFIGURATIONCollection;
/// <summary>
/// 
/// </summary>
protected Objects.PROJECTObject _PROJECTEntity;
/// <summary>
/// 
/// </summary>
protected Objects.STATUSObject _STATUSEntity;
/// <summary>
/// 
/// </summary>
protected Objects.TASKObject _TASKEntity;

        #endregion

        #region "Properties"
        

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.RESOURCEList RESOURCECollection
        {
            get
            {
                if (_RESOURCECollection== null) {
  		 ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(RESOURCE));
 _RESOURCECollection = lazyProvider.GetList(typeof(RESOURCE), this) as RESOURCEList;
 }
                return _RESOURCECollection;
            }
            set
            {
                base.PropertyModified();
                _RESOURCECollection = value;
                
            }
        }
        

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.TASK_CONFIGURATIONList TASK_CONFIGURATIONCollection
        {
            get
            {
                if (_TASK_CONFIGURATIONCollection== null) {
  		 ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(TASK_CONFIGURATION));
 _TASK_CONFIGURATIONCollection = lazyProvider.GetList(typeof(TASK_CONFIGURATION), this) as TASK_CONFIGURATIONList;
 }
                return _TASK_CONFIGURATIONCollection;
            }
            set
            {
                base.PropertyModified();
                _TASK_CONFIGURATIONCollection = value;
                
            }
        }
        
bool _PROJECTEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.PROJECTObject PROJECTEntity
        {
            get
            {
                if (_PROJECTEntity== null  && ! _PROJECTEntityFetched ) {
_PROJECTEntityFetched = true;
Objects.PROJECTObject _PROJECTEntityTemp = new Objects.PROJECTObject(this.Id_Project); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.PROJECTObject));
 _PROJECTEntity = lazyProvider.GetEntity(typeof(Objects.PROJECTObject), _PROJECTEntityTemp) as Objects.PROJECTObject;
}

                return _PROJECTEntity;
            }
            set
            {
                base.PropertyModified();
                _PROJECTEntity = value;
                if (value != null) {
   _Id_Project = value.Id_Project;
_PROJECTString = value.Name;
} else {
   _Id_Project = System.Int32.MinValue;
_PROJECTString = "";
}

            }
        }
        
bool _STATUSEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.STATUSObject STATUSEntity
        {
            get
            {
                if (_STATUSEntity== null  && ! _STATUSEntityFetched ) {
_STATUSEntityFetched = true;
Objects.STATUSObject _STATUSEntityTemp = new Objects.STATUSObject(this.Id_Status); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.STATUSObject));
 _STATUSEntity = lazyProvider.GetEntity(typeof(Objects.STATUSObject), _STATUSEntityTemp) as Objects.STATUSObject;
}

                return _STATUSEntity;
            }
            set
            {
                base.PropertyModified();
                _STATUSEntity = value;
                if (value != null) {
   _Id_Status = value.Id_Status;
_STATUSString = value.Description;
} else {
   _Id_Status = System.Byte.MinValue;
_STATUSString = "";
}

            }
        }
        
bool _TASKEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.TASKObject TASKEntity
        {
            get
            {
                if (_TASKEntity== null  && this.Id_Task_Parent.HasValue && ! _TASKEntityFetched ) {
_TASKEntityFetched = true;
Objects.TASKObject _TASKEntityTemp = new Objects.TASKObject(this.Id_Task_Parent.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.TASKObject));
 _TASKEntity = lazyProvider.GetEntity(typeof(Objects.TASKObject), _TASKEntityTemp) as Objects.TASKObject;
}

                return _TASKEntity;
            }
            set
            {
                base.PropertyModified();
                _TASKEntity = value;
                if (value != null) {
   _Id_Task_Parent = value.Id_Task;

} else {
   _Id_Task_Parent = null;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new TASK OriginalValue()
        {
            return (TASK)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            TASK newObject;            
            SISMONRules.Entities.RESOURCEList newRESOURCECollection;
SISMONRules.Entities.TASK_CONFIGURATIONList newTASK_CONFIGURATIONCollection;


            newObject = (TASK)this.MemberwiseClone();
            // Entities
                         
            if (this._PROJECTEntity != null)
            {
                newObject._PROJECTEntity = (Objects.PROJECTObject)((ICloneable)this._PROJECTEntity).Clone();
            }
                         
            if (this._STATUSEntity != null)
            {
                newObject._STATUSEntity = (Objects.STATUSObject)((ICloneable)this._STATUSEntity).Clone();
            }
                         
            if (this._TASKEntity != null)
            {
                newObject._TASKEntity = (Objects.TASKObject)((ICloneable)this._TASKEntity).Clone();
            }
            
            // Colections
            
            if (this._RESOURCECollection != null)
            {
                
                newRESOURCECollection = new SISMONRules.Entities.RESOURCEList();
                
                foreach (SISMONRules.Entities.RESOURCE row in this._RESOURCECollection)
                { 
                    newRESOURCECollection.Add((SISMONRules.Entities.RESOURCE)((ICloneable) row).Clone());
                }
                newObject._RESOURCECollection = newRESOURCECollection;
            }
            
            if (this._TASK_CONFIGURATIONCollection != null)
            {
                
                newTASK_CONFIGURATIONCollection = new SISMONRules.Entities.TASK_CONFIGURATIONList();
                
                foreach (SISMONRules.Entities.TASK_CONFIGURATION row in this._TASK_CONFIGURATIONCollection)
                { 
                    newTASK_CONFIGURATIONCollection.Add((SISMONRules.Entities.TASK_CONFIGURATION)((ICloneable) row).Clone());
                }
                newObject._TASK_CONFIGURATIONCollection = newTASK_CONFIGURATIONCollection;
            }
            
            // OriginalValue
            TASK newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (TASK)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._PROJECTEntity != null)
                {
                    newOriginalValue._PROJECTEntity = (Objects.PROJECTObject)((ICloneable)this.OriginalValue()._PROJECTEntity).Clone();
                }
                             
                if (this.OriginalValue()._STATUSEntity != null)
                {
                    newOriginalValue._STATUSEntity = (Objects.STATUSObject)((ICloneable)this.OriginalValue()._STATUSEntity).Clone();
                }
                             
                if (this.OriginalValue()._TASKEntity != null)
                {
                    newOriginalValue._TASKEntity = (Objects.TASKObject)((ICloneable)this.OriginalValue()._TASKEntity).Clone();
                }
                
                // Colections
                
                if (this.OriginalValue()._RESOURCECollection != null)
                {
                    
                    newRESOURCECollection = new SISMONRules.Entities.RESOURCEList();
                    
                    foreach (SISMONRules.Entities.RESOURCE row in this.OriginalValue()._RESOURCECollection)
                    {
                        newRESOURCECollection.Add((SISMONRules.Entities.RESOURCE)((ICloneable)row).Clone());
                    }
                    newOriginalValue._RESOURCECollection = newRESOURCECollection;
                }                
                
                if (this.OriginalValue()._TASK_CONFIGURATIONCollection != null)
                {
                    
                    newTASK_CONFIGURATIONCollection = new SISMONRules.Entities.TASK_CONFIGURATIONList();
                    
                    foreach (SISMONRules.Entities.TASK_CONFIGURATION row in this.OriginalValue()._TASK_CONFIGURATIONCollection)
                    {
                        newTASK_CONFIGURATIONCollection.Add((SISMONRules.Entities.TASK_CONFIGURATION)((ICloneable)row).Clone());
                    }
                    newOriginalValue._TASK_CONFIGURATIONCollection = newTASK_CONFIGURATIONCollection;
                }                
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableTASK.CompleteEntity(Entities.RESOURCEList RESOURCECollection, Entities.TASK_CONFIGURATIONList TASK_CONFIGURATIONCollection, Objects.PROJECTObject PROJECTEntity, Objects.STATUSObject STATUSEntity, Objects.TASKObject TASKEntity)
        {
        _RESOURCECollection = RESOURCECollection;
_TASK_CONFIGURATIONCollection = TASK_CONFIGURATIONCollection;
_PROJECTEntity = PROJECTEntity;
_STATUSEntity = STATUSEntity;
_TASKEntity = TASKEntity;
        }
        
        bool IMappeableTASK.IsRESOURCECollectionNull()
        {
            return (_RESOURCECollection == null);
        }
        
        bool IMappeableTASK.IsTASK_CONFIGURATIONCollectionNull()
        {
            return (_TASK_CONFIGURATIONCollection == null);
        }
        
        bool IMappeableTASK.IsPROJECTEntityNull()
        {
            return (_PROJECTEntity == null);
        }
        
        bool IMappeableTASK.IsSTATUSEntityNull()
        {
            return (_STATUSEntity == null);
        }
        
        bool IMappeableTASK.IsTASKEntityNull()
        {
            return (_TASKEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableTASK.SetFKValuesForChilds(TASK entity)
        {
        
            if (_RESOURCECollection != null)
            {
                
                foreach (SISMONRules.Entities.RESOURCE item in _RESOURCECollection)
                {
                        
                        
                        
                        
                    if ( item.Id_Task != entity.Id_Task) item.Id_Task = entity.Id_Task;
                    
                }
            }
            
            if (_TASK_CONFIGURATIONCollection != null)
            {
                
                foreach (SISMONRules.Entities.TASK_CONFIGURATION item in _TASK_CONFIGURATIONCollection)
                {
                        
                        
                        
                        
                    if ( item.Id_Task != entity.Id_Task) item.Id_Task = entity.Id_Task;
                    
                }
            }
                    
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(TASK other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableTASK
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.RESOURCEList RESOURCECollection, Entities.TASK_CONFIGURATIONList TASK_CONFIGURATIONCollection, Objects.PROJECTObject PROJECTEntity, Objects.STATUSObject STATUSEntity, Objects.TASKObject TASKEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsRESOURCECollectionNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsTASK_CONFIGURATIONCollectionNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsPROJECTEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsSTATUSEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsTASKEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(TASK entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class TASKList : ObjectList<TASK>
    {
    }
}
namespace SISMONRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class TASKListView
        : ObjectListView<Entities.TASK>
    {
        /// <summary>
        /// 
        /// </summary>
        public TASKListView(Entities.TASKList list): base(list)
        {
        }
    }
}


