
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is RESOURCEEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using SISMONRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace SISMONRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class RESOURCE : Objects.RESOURCEObject, IMappeableRESOURCE, IEquatable<RESOURCE>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public RESOURCE()
            :base()
        {
            if (_TASKEntity == null) _TASKEntity = new Objects.TASKObject();
if (_USEREntity == null) _USEREntity = new Objects.USERObject();

        }

        /// <summary>
        /// 
        /// </summary>
        public RESOURCE(
			System.Int32 Id_Resource)
            : base()
        {

			_Id_Resource = Id_Resource;

            if (_TASKEntity == null) _TASKEntity = new Objects.TASKObject();
if (_USEREntity == null) _USEREntity = new Objects.USERObject();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public RESOURCE(
			System.Int32 Id_Resource,
			System.Int32 Id_Task,
			System.Int32 Id_User,
			System.Byte Id_Status,
			System.String USERString)
            : base()
        {

			_Id_Resource = Id_Resource;
			_Id_Task = Id_Task;
			_Id_User = Id_User;
			_Id_Status = Id_Status;
			_USERString = USERString;

            if (_TASKEntity == null) _TASKEntity = new Objects.TASKObject();
if (_USEREntity == null) _USEREntity = new Objects.USERObject();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Objects.TASKObject _TASKEntity;
/// <summary>
/// 
/// </summary>
protected Objects.USERObject _USEREntity;

        #endregion

        #region "Properties"
        
bool _TASKEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.TASKObject TASKEntity
        {
            get
            {
                if (_TASKEntity== null  && ! _TASKEntityFetched ) {
_TASKEntityFetched = true;
Objects.TASKObject _TASKEntityTemp = new Objects.TASKObject(this.Id_Task); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.TASKObject));
 _TASKEntity = lazyProvider.GetEntity(typeof(Objects.TASKObject), _TASKEntityTemp) as Objects.TASKObject;
}

                return _TASKEntity;
            }
            set
            {
                base.PropertyModified();
                _TASKEntity = value;
                if (value != null) {
   _Id_Task = value.Id_Task;

} else {
   _Id_Task = System.Int32.MinValue;

}

            }
        }
        
bool _USEREntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.USERObject USEREntity
        {
            get
            {
                if (_USEREntity== null  && ! _USEREntityFetched ) {
_USEREntityFetched = true;
Objects.USERObject _USEREntityTemp = new Objects.USERObject(this.Id_User); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.USERObject));
 _USEREntity = lazyProvider.GetEntity(typeof(Objects.USERObject), _USEREntityTemp) as Objects.USERObject;
}

                return _USEREntity;
            }
            set
            {
                base.PropertyModified();
                _USEREntity = value;
                if (value != null) {
   _Id_User = value.Id_User;
_USERString = value.Full_Name;
} else {
   _Id_User = System.Int32.MinValue;
_USERString = "";
}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new RESOURCE OriginalValue()
        {
            return (RESOURCE)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            RESOURCE newObject;            
            

            newObject = (RESOURCE)this.MemberwiseClone();
            // Entities
                         
            if (this._TASKEntity != null)
            {
                newObject._TASKEntity = (Objects.TASKObject)((ICloneable)this._TASKEntity).Clone();
            }
                         
            if (this._USEREntity != null)
            {
                newObject._USEREntity = (Objects.USERObject)((ICloneable)this._USEREntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            RESOURCE newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (RESOURCE)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._TASKEntity != null)
                {
                    newOriginalValue._TASKEntity = (Objects.TASKObject)((ICloneable)this.OriginalValue()._TASKEntity).Clone();
                }
                             
                if (this.OriginalValue()._USEREntity != null)
                {
                    newOriginalValue._USEREntity = (Objects.USERObject)((ICloneable)this.OriginalValue()._USEREntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableRESOURCE.CompleteEntity(Objects.TASKObject TASKEntity, Objects.USERObject USEREntity)
        {
        _TASKEntity = TASKEntity;
_USEREntity = USEREntity;
        }
        
        bool IMappeableRESOURCE.IsTASKEntityNull()
        {
            return (_TASKEntity == null);
        }
        
        bool IMappeableRESOURCE.IsUSEREntityNull()
        {
            return (_USEREntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableRESOURCE.SetFKValuesForChilds(RESOURCE entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(RESOURCE other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableRESOURCE
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Objects.TASKObject TASKEntity, Objects.USERObject USEREntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsTASKEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsUSEREntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(RESOURCE entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class RESOURCEList : ObjectList<RESOURCE>
    {
    }
}
namespace SISMONRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class RESOURCEListView
        : ObjectListView<Entities.RESOURCE>
    {
        /// <summary>
        /// 
        /// </summary>
        public RESOURCEListView(Entities.RESOURCEList list): base(list)
        {
        }
    }
}


