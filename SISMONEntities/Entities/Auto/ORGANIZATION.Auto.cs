
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is ORGANIZATIONEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using SISMONRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace SISMONRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ORGANIZATION : Objects.ORGANIZATIONObject, IMappeableORGANIZATION, IEquatable<ORGANIZATION>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATION()
            :base()
        {
            if (_ORGANIZATION_LEVELNAMECollection == null) _ORGANIZATION_LEVELNAMECollection = new Entities.ORGANIZATION_LEVELNAMEList();
if (_STATUSEntity == null) _STATUSEntity = new Objects.STATUSObject();

        }

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATION(
			System.Int32 Id_Organization)
            : base()
        {

			_Id_Organization = Id_Organization;

            if (_ORGANIZATION_LEVELNAMECollection == null) _ORGANIZATION_LEVELNAMECollection = new Entities.ORGANIZATION_LEVELNAMEList();
if (_STATUSEntity == null) _STATUSEntity = new Objects.STATUSObject();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATION(
			System.Int32 Id_Organization,
			System.String Name,
			System.String Description,
			System.Byte Id_Status,
			System.String STATUSString)
            : base()
        {

			_Id_Organization = Id_Organization;
			_Name = Name;
			_Description = Description;
			_Id_Status = Id_Status;
			_STATUSString = STATUSString;

            if (_ORGANIZATION_LEVELNAMECollection == null) _ORGANIZATION_LEVELNAMECollection = new Entities.ORGANIZATION_LEVELNAMEList();
if (_STATUSEntity == null) _STATUSEntity = new Objects.STATUSObject();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.ORGANIZATION_LEVELNAMEList _ORGANIZATION_LEVELNAMECollection;
/// <summary>
/// 
/// </summary>
protected Objects.STATUSObject _STATUSEntity;

        #endregion

        #region "Properties"
        

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.ORGANIZATION_LEVELNAMEList ORGANIZATION_LEVELNAMECollection
        {
            get
            {
                if (_ORGANIZATION_LEVELNAMECollection== null) {
  		 ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(ORGANIZATION_LEVELNAME));
 _ORGANIZATION_LEVELNAMECollection = lazyProvider.GetList(typeof(ORGANIZATION_LEVELNAME), this) as ORGANIZATION_LEVELNAMEList;
 }
                return _ORGANIZATION_LEVELNAMECollection;
            }
            set
            {
                base.PropertyModified();
                _ORGANIZATION_LEVELNAMECollection = value;
                
            }
        }
        
bool _STATUSEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.STATUSObject STATUSEntity
        {
            get
            {
                if (_STATUSEntity== null  && ! _STATUSEntityFetched ) {
_STATUSEntityFetched = true;
Objects.STATUSObject _STATUSEntityTemp = new Objects.STATUSObject(this.Id_Status); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.STATUSObject));
 _STATUSEntity = lazyProvider.GetEntity(typeof(Objects.STATUSObject), _STATUSEntityTemp) as Objects.STATUSObject;
}

                return _STATUSEntity;
            }
            set
            {
                base.PropertyModified();
                _STATUSEntity = value;
                if (value != null) {
   _Id_Status = value.Id_Status;
_STATUSString = value.Description;
} else {
   _Id_Status = System.Byte.MinValue;
_STATUSString = "";
}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new ORGANIZATION OriginalValue()
        {
            return (ORGANIZATION)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            ORGANIZATION newObject;            
            SISMONRules.Entities.ORGANIZATION_LEVELNAMEList newORGANIZATION_LEVELNAMECollection;


            newObject = (ORGANIZATION)this.MemberwiseClone();
            // Entities
                         
            if (this._STATUSEntity != null)
            {
                newObject._STATUSEntity = (Objects.STATUSObject)((ICloneable)this._STATUSEntity).Clone();
            }
            
            // Colections
            
            if (this._ORGANIZATION_LEVELNAMECollection != null)
            {
                
                newORGANIZATION_LEVELNAMECollection = new SISMONRules.Entities.ORGANIZATION_LEVELNAMEList();
                
                foreach (SISMONRules.Entities.ORGANIZATION_LEVELNAME row in this._ORGANIZATION_LEVELNAMECollection)
                { 
                    newORGANIZATION_LEVELNAMECollection.Add((SISMONRules.Entities.ORGANIZATION_LEVELNAME)((ICloneable) row).Clone());
                }
                newObject._ORGANIZATION_LEVELNAMECollection = newORGANIZATION_LEVELNAMECollection;
            }
            
            // OriginalValue
            ORGANIZATION newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (ORGANIZATION)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._STATUSEntity != null)
                {
                    newOriginalValue._STATUSEntity = (Objects.STATUSObject)((ICloneable)this.OriginalValue()._STATUSEntity).Clone();
                }
                
                // Colections
                
                if (this.OriginalValue()._ORGANIZATION_LEVELNAMECollection != null)
                {
                    
                    newORGANIZATION_LEVELNAMECollection = new SISMONRules.Entities.ORGANIZATION_LEVELNAMEList();
                    
                    foreach (SISMONRules.Entities.ORGANIZATION_LEVELNAME row in this.OriginalValue()._ORGANIZATION_LEVELNAMECollection)
                    {
                        newORGANIZATION_LEVELNAMECollection.Add((SISMONRules.Entities.ORGANIZATION_LEVELNAME)((ICloneable)row).Clone());
                    }
                    newOriginalValue._ORGANIZATION_LEVELNAMECollection = newORGANIZATION_LEVELNAMECollection;
                }                
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableORGANIZATION.CompleteEntity(Entities.ORGANIZATION_LEVELNAMEList ORGANIZATION_LEVELNAMECollection, Objects.STATUSObject STATUSEntity)
        {
        _ORGANIZATION_LEVELNAMECollection = ORGANIZATION_LEVELNAMECollection;
_STATUSEntity = STATUSEntity;
        }
        
        bool IMappeableORGANIZATION.IsORGANIZATION_LEVELNAMECollectionNull()
        {
            return (_ORGANIZATION_LEVELNAMECollection == null);
        }
        
        bool IMappeableORGANIZATION.IsSTATUSEntityNull()
        {
            return (_STATUSEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableORGANIZATION.SetFKValuesForChilds(ORGANIZATION entity)
        {
        
            if (_ORGANIZATION_LEVELNAMECollection != null)
            {
                
                foreach (SISMONRules.Entities.ORGANIZATION_LEVELNAME item in _ORGANIZATION_LEVELNAMECollection)
                {
                        
                        
                        
                        
                    if ( item.Id_Organization != entity.Id_Organization) item.Id_Organization = entity.Id_Organization;
                    
                }
            }
                    
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(ORGANIZATION other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableORGANIZATION
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.ORGANIZATION_LEVELNAMEList ORGANIZATION_LEVELNAMECollection, Objects.STATUSObject STATUSEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsORGANIZATION_LEVELNAMECollectionNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsSTATUSEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(ORGANIZATION entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class ORGANIZATIONList : ObjectList<ORGANIZATION>
    {
    }
}
namespace SISMONRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class ORGANIZATIONListView
        : ObjectListView<Entities.ORGANIZATION>
    {
        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATIONListView(Entities.ORGANIZATIONList list): base(list)
        {
        }
    }
}


