
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is DEPENDENCYEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using SISMONRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace SISMONRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class DEPENDENCY : Objects.DEPENDENCYObject, IMappeableDEPENDENCY, IEquatable<DEPENDENCY>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCY()
            :base()
        {
            if (_PROJECTEntity == null) _PROJECTEntity = new Objects.PROJECTObject();

        }

        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCY(
			System.Int32 Id_Dependency)
            : base()
        {

			_Id_Dependency = Id_Dependency;

            if (_PROJECTEntity == null) _PROJECTEntity = new Objects.PROJECTObject();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCY(
			System.Int32 Id_Dependency,
			System.Int32 Id_Predecessor,
			System.Int32 Id_Successor,
			System.Int32 Type,
			System.Int32 Id_Project)
            : base()
        {

			_Id_Dependency = Id_Dependency;
			_Id_Predecessor = Id_Predecessor;
			_Id_Successor = Id_Successor;
			_Type = Type;
			_Id_Project = Id_Project;

            if (_PROJECTEntity == null) _PROJECTEntity = new Objects.PROJECTObject();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Objects.PROJECTObject _PROJECTEntity;

        #endregion

        #region "Properties"
        
bool _PROJECTEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Objects.PROJECTObject PROJECTEntity
        {
            get
            {
                if (_PROJECTEntity== null  && ! _PROJECTEntityFetched ) {
_PROJECTEntityFetched = true;
Objects.PROJECTObject _PROJECTEntityTemp = new Objects.PROJECTObject(this.Id_Project); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Objects.PROJECTObject));
 _PROJECTEntity = lazyProvider.GetEntity(typeof(Objects.PROJECTObject), _PROJECTEntityTemp) as Objects.PROJECTObject;
}

                return _PROJECTEntity;
            }
            set
            {
                base.PropertyModified();
                _PROJECTEntity = value;
                if (value != null) {
   _Id_Project = value.Id_Project;

} else {
   _Id_Project = System.Int32.MinValue;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new DEPENDENCY OriginalValue()
        {
            return (DEPENDENCY)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            DEPENDENCY newObject;            
            

            newObject = (DEPENDENCY)this.MemberwiseClone();
            // Entities
                         
            if (this._PROJECTEntity != null)
            {
                newObject._PROJECTEntity = (Objects.PROJECTObject)((ICloneable)this._PROJECTEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            DEPENDENCY newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (DEPENDENCY)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._PROJECTEntity != null)
                {
                    newOriginalValue._PROJECTEntity = (Objects.PROJECTObject)((ICloneable)this.OriginalValue()._PROJECTEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableDEPENDENCY.CompleteEntity(Objects.PROJECTObject PROJECTEntity)
        {
        _PROJECTEntity = PROJECTEntity;
        }
        
        bool IMappeableDEPENDENCY.IsPROJECTEntityNull()
        {
            return (_PROJECTEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableDEPENDENCY.SetFKValuesForChilds(DEPENDENCY entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(DEPENDENCY other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableDEPENDENCY
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Objects.PROJECTObject PROJECTEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsPROJECTEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(DEPENDENCY entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class DEPENDENCYList : ObjectList<DEPENDENCY>
    {
    }
}
namespace SISMONRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class DEPENDENCYListView
        : ObjectListView<Entities.DEPENDENCY>
    {
        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCYListView(Entities.DEPENDENCYList list): base(list)
        {
        }
    }
}


