
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is USER_PROFILEMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class USER_PROFILEMapper : BaseGateway<USER_PROFILE, USER_PROFILEList>, IGenericGateway
    {


        #region "Singleton"

        static USER_PROFILEMapper _instance;

        private USER_PROFILEMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static USER_PROFILEMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new USER_PROFILEMapper();
                else {
                    USER_PROFILEMapper inst = HttpContext.Current.Items["SISMONRules.USER_PROFILEMapperSingleton"] as USER_PROFILEMapper;
                    if (inst == null) {
                        inst = new USER_PROFILEMapper();
                        HttpContext.Current.Items.Add("SISMONRules.USER_PROFILEMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Profile","Id_User"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(USER_PROFILE);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "USER_PROFILE"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(USER_PROFILEMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, USER_PROFILE entity)
        {
            
            IMappeableUSER_PROFILEObject USER_PROFILE = (IMappeableUSER_PROFILEObject)entity;
            USER_PROFILE.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(USER_PROFILE entity)
        {

            IMappeableUSER_PROFILEObject USER_PROFILE = (IMappeableUSER_PROFILEObject)entity;
            return USER_PROFILE.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(USER_PROFILE entity)
        {

            IMappeableUSER_PROFILEObject USER_PROFILE = (IMappeableUSER_PROFILEObject)entity;
            return USER_PROFILE.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(USER_PROFILE entity)
        {

            IMappeableUSER_PROFILEObject USER_PROFILE = (IMappeableUSER_PROFILEObject)entity;
            return USER_PROFILE.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(USER_PROFILE entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableUSER_PROFILEObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(USER_PROFILE entity)
        {
            
            ((IMappeableUSER_PROFILE)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a USER_PROFILE by execute a SQL Query Text
        /// </summary>
        public USER_PROFILE GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a USER_PROFILEList by execute a SQL Query Text
        /// </summary>
        public USER_PROFILEList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILE GetOne(System.Int32 Id_Profile, System.Int32 Id_User)
        {
            return base.GetOne(new USER_PROFILE(Id_Profile, Id_User));
        }


        // GetOne By Objects and Params
                                    
        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILE GetOne(IUniqueIdentifiable PROFILE, System.Int32 Id_User)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(PROFILE, Id_User));
        }   
                        


        

        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILEList GetByPROFILE(DbTransaction transaction, System.Int32 Id_Profile)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_GetByPROFILE", Id_Profile);
        }

        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILEList GetByPROFILE(DbTransaction transaction, IUniqueIdentifiable PROFILE)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_GetByPROFILE", PROFILE.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILEList GetByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILEList GetByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_GetByUSER", USER.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILEList GetByPROFILE(System.Int32 Id_Profile)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetByPROFILE", Id_Profile);
        }

        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILEList GetByPROFILE(IUniqueIdentifiable PROFILE)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetByPROFILE", PROFILE.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILEList GetByUSER(System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public USER_PROFILEList GetByUSER(IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetByUSER", USER.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Profile, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_Delete", Id_Profile, Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Profile, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_Delete", Id_Profile, Id_User);
        }


        // Delete By Objects and Params
                                    
        /// <summary>
        /// 
        /// </summary>
        public void Delete(IUniqueIdentifiable PROFILE, System.Int32 Id_User)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_Delete",  UniqueIdentifierHelper.ComposeIdentifier(PROFILE, Id_User));
        }   
        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, IUniqueIdentifiable PROFILE, System.Int32 Id_User)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_Delete",  UniqueIdentifierHelper.ComposeIdentifier(PROFILE, Id_User));
        }   
                        



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROFILE(System.Int32 Id_Profile)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_DeleteByPROFILE", Id_Profile);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROFILE(DbTransaction transaction, System.Int32 Id_Profile)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_DeleteByPROFILE", Id_Profile);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROFILE(IUniqueIdentifiable PROFILE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_DeleteByPROFILE", PROFILE.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROFILE(DbTransaction transaction, IUniqueIdentifiable PROFILE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_DeleteByPROFILE", PROFILE.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_DeleteByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_DeleteByUSER", Id_User);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_DeleteByUSER", USER.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_DeleteByUSER", USER.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByUser(System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_DeleteByUser" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByUser(DbTransaction transaction , System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_DeleteByUser" , Id_User);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class USER_PROFILEMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.USER_PROFILEMapper Instance()
        {
            return SISMONRules.Mappers.USER_PROFILEMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a USER_PROFILEEntity by calling a Stored Procedure
        /// </summary>
        public Entities.USER_PROFILE GetOne(System.Int32 Id_Profile, System.Int32 Id_User) {
            return Instance().GetOne( Id_Profile, Id_User);
        }

        // GetBy Objects and Params
                                    
        /// <summary>
        /// Get a USER_PROFILE  by calling a Stored Procedure
        /// </summary>
        public Entities.USER_PROFILE GetOne(IUniqueIdentifiable PROFILE, System.Int32 Id_User)
        {
            return Instance().GetOne(PROFILE, Id_User);
        }   
                        

        

        /// <summary>
        /// Get a USER_PROFILEList by calling a Stored Procedure
        /// </summary>
        public Entities.USER_PROFILEList GetByPROFILE(System.Int32 Id_Profile)
        {
            return Instance().GetByPROFILE(Id_Profile);
        }

        /// <summary>
        /// Get a USER_PROFILEList by calling a Stored Procedure
        /// </summary>
        public Entities.USER_PROFILEList GetByPROFILE(IUniqueIdentifiable PROFILE)
        {
            return Instance().GetByPROFILE(PROFILE);
        }

    

        /// <summary>
        /// Get a USER_PROFILEList by calling a Stored Procedure
        /// </summary>
        public Entities.USER_PROFILEList GetByUSER(System.Int32 Id_User)
        {
            return Instance().GetByUSER(Id_User);
        }

        /// <summary>
        /// Get a USER_PROFILEList by calling a Stored Procedure
        /// </summary>
        public Entities.USER_PROFILEList GetByUSER(IUniqueIdentifiable USER)
        {
            return Instance().GetByUSER(USER);
        }

    

       

        /// <summary>
        /// Delete children for USER_PROFILE
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, USER_PROFILE entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

                                    

        /// <summary>
        /// Delete USER_PROFILE
        /// </summary>
        public void Delete(IUniqueIdentifiable PROFILE, System.Int32 Id_User)
        {
            Instance().Delete(PROFILE, Id_User);
        }   
                        

        

        /// <summary>
        /// Delete USER_PROFILE by PROFILE
        /// </summary>
        public void DeleteByPROFILE(System.Int32 Id_Profile)
        {
            Instance().DeleteByPROFILE(Id_Profile);
        }

        /// <summary>
        /// Delete USER_PROFILE by PROFILE
        /// </summary>
        public void DeleteByPROFILE(IUniqueIdentifiable PROFILE)
        {
            Instance().DeleteByPROFILE(PROFILE);
        }

    

        /// <summary>
        /// Delete USER_PROFILE by USER
        /// </summary>
        public void DeleteByUSER(System.Int32 Id_User)
        {
            Instance().DeleteByUSER(Id_User);
        }

        /// <summary>
        /// Delete USER_PROFILE by USER
        /// </summary>
        public void DeleteByUSER(IUniqueIdentifiable USER)
        {
            Instance().DeleteByUSER(USER);
        }

    
        /// <summary>
        /// Delete USER_PROFILE 
        /// </summary>
        public void Delete(System.Int32 Id_Profile, System.Int32 Id_User){
            Instance().Delete(Id_Profile, Id_User);
        }

        /// <summary>
        /// Delete USER_PROFILE 
        /// </summary>
        public void Delete(Entities.USER_PROFILE entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save USER_PROFILE  
        /// </summary>
        public void Save(Entities.USER_PROFILE entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert USER_PROFILE 
        /// </summary>
        public void Insert(Entities.USER_PROFILE entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll USER_PROFILE 
        /// </summary>
        public Entities.USER_PROFILEList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save USER_PROFILE 
        /// </summary>
        public void Save(System.Int32 Id_Profile, System.Int32 Id_User, System.String PROFILEString){
            Entities.USER_PROFILE entity = Instance().GetOne(Id_Profile, Id_User);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}, {2} = {3}", "Id_Profile", Id_Profile, "Id_User", Id_User));

            Instance().Save(entity);
        }

        /// <summary>
        /// Insert USER_PROFILE
        /// </summary>
        public void Insert(System.Int32 Id_Profile, System.Int32 Id_User){
            Entities.USER_PROFILE entity = new Entities.USER_PROFILE();

            entity.Id_Profile = Id_Profile;
            entity.Id_User = Id_User;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByUser(System.Int32 Id_User) {
            
                return Instance().DeleteByUser( Id_User);
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class USER_PROFILELoader<T> : BaseLoader< T, USER_PROFILE, ObjectList<T>>, IGenericGateway where T : USER_PROFILE, new()
    {

        #region "Singleton"

        static USER_PROFILELoader<T> _instance;

        private USER_PROFILELoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static USER_PROFILELoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new USER_PROFILELoader<T>();
                else {
                    USER_PROFILELoader<T> inst = HttpContext.Current.Items["SISMONRules.USER_PROFILELoaderSingleton"] as USER_PROFILELoader<T>;
                    if (inst == null) {
                        inst = new USER_PROFILELoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.USER_PROFILELoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Profile","Id_User"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(USER_PROFILE);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "USER_PROFILE"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, USER_PROFILE entity)
        {
            
            IMappeableUSER_PROFILEObject USER_PROFILE = (IMappeableUSER_PROFILEObject)entity;
            USER_PROFILE.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableUSER_PROFILE)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a USER_PROFILE by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a USER_PROFILEList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Profile, System.Int32 Id_User)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetOne", Id_Profile, Id_User);
        }


        // GetOne By Objects and Params
                                    
        /// <summary>
        /// 
        /// </summary>
        public T GetOne(IUniqueIdentifiable PROFILE, System.Int32 Id_User)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(PROFILE, Id_User));
        }   
                        


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROFILE(DbTransaction transaction, System.Int32 Id_Profile)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_GetByPROFILE", Id_Profile);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROFILE(DbTransaction transaction, IUniqueIdentifiable PROFILE)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_GetByPROFILE", PROFILE.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_GetByUSER", USER.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROFILE(System.Int32 Id_Profile)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetByPROFILE", Id_Profile);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROFILE(IUniqueIdentifiable PROFILE)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetByPROFILE", PROFILE.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_GetByUSER", USER.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByUser(System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_PROFILE_DeleteByUser" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByUser(DbTransaction transaction , System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_PROFILE_DeleteByUser" , Id_User);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





