
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 05/10/2014 - 06:22 p.m.
// This is a partial class file. The other one is ATTACHMENTMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ATTACHMENTMapper : BaseGateway<ATTACHMENT, ATTACHMENTList>, IGenericGateway
    {


        #region "Singleton"

        static ATTACHMENTMapper _instance;

        private ATTACHMENTMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ATTACHMENTMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ATTACHMENTMapper();
                else {
                    ATTACHMENTMapper inst = HttpContext.Current.Items["SISMONRules.ATTACHMENTMapperSingleton"] as ATTACHMENTMapper;
                    if (inst == null) {
                        inst = new ATTACHMENTMapper();
                        HttpContext.Current.Items.Add("SISMONRules.ATTACHMENTMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Attachment"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ATTACHMENT);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ATTACHMENT"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ATTACHMENTMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ATTACHMENT entity)
        {
            
            IMappeableATTACHMENTObject ATTACHMENT = (IMappeableATTACHMENTObject)entity;
            ATTACHMENT.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetString(3),
reader.GetBoolean(4),
reader.GetByte(5));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(ATTACHMENT entity)
        {

            IMappeableATTACHMENTObject ATTACHMENT = (IMappeableATTACHMENTObject)entity;
            return ATTACHMENT.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(ATTACHMENT entity)
        {

            IMappeableATTACHMENTObject ATTACHMENT = (IMappeableATTACHMENTObject)entity;
            return ATTACHMENT.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(ATTACHMENT entity)
        {

            IMappeableATTACHMENTObject ATTACHMENT = (IMappeableATTACHMENTObject)entity;
            return ATTACHMENT.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ATTACHMENT entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableATTACHMENTObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(ATTACHMENT entity)
        {
            Objects.STATUSObject STATUSEntity = null; // Lazy load
Objects.TASKObject TASKEntity = null; // Lazy load
            ((IMappeableATTACHMENT)entity).CompleteEntity(STATUSEntity, TASKEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a ATTACHMENT by execute a SQL Query Text
        /// </summary>
        public ATTACHMENT GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ATTACHMENTList by execute a SQL Query Text
        /// </summary>
        public ATTACHMENTList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public ATTACHMENT GetOne(System.Int32 Id_Attachment)
        {
            return base.GetOne(new ATTACHMENT(Id_Attachment));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ATTACHMENTList GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ATTACHMENTList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ATTACHMENTList GetByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ATTACHMENTList GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", TASK.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ATTACHMENTList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ATTACHMENTList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ATTACHMENTList GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ATTACHMENTList GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Attachment)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_Delete", Id_Attachment);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Attachment)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_Delete", Id_Attachment);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_DeleteBySTATUS", Id_Status);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_DeleteBySTATUS", STATUS.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_DeleteByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_DeleteByTASK", Id_Task);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_DeleteByTASK", TASK.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_DeleteByTASK", TASK.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ATTACHMENTMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.ATTACHMENTMapper Instance()
        {
            return SISMONRules.Mappers.ATTACHMENTMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ATTACHMENTEntity by calling a Stored Procedure
        /// </summary>
        public Entities.ATTACHMENT GetOne(System.Int32 Id_Attachment) {
            return Instance().GetOne( Id_Attachment);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a ATTACHMENTList by calling a Stored Procedure
        /// </summary>
        public Entities.ATTACHMENTList GetBySTATUS(System.Byte Id_Status)
        {
            return Instance().GetBySTATUS(Id_Status);
        }

        /// <summary>
        /// Get a ATTACHMENTList by calling a Stored Procedure
        /// </summary>
        public Entities.ATTACHMENTList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return Instance().GetBySTATUS(STATUS);
        }

    

        /// <summary>
        /// Get a ATTACHMENTList by calling a Stored Procedure
        /// </summary>
        public Entities.ATTACHMENTList GetByTASK(System.Int32 Id_Task)
        {
            return Instance().GetByTASK(Id_Task);
        }

        /// <summary>
        /// Get a ATTACHMENTList by calling a Stored Procedure
        /// </summary>
        public Entities.ATTACHMENTList GetByTASK(IUniqueIdentifiable TASK)
        {
            return Instance().GetByTASK(TASK);
        }

    

       

        /// <summary>
        /// Delete children for ATTACHMENT
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, ATTACHMENT entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete ATTACHMENT by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            Instance().DeleteBySTATUS(Id_Status);
        }

        /// <summary>
        /// Delete ATTACHMENT by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            Instance().DeleteBySTATUS(STATUS);
        }

    

        /// <summary>
        /// Delete ATTACHMENT by TASK
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            Instance().DeleteByTASK(Id_Task);
        }

        /// <summary>
        /// Delete ATTACHMENT by TASK
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            Instance().DeleteByTASK(TASK);
        }

    
        /// <summary>
        /// Delete ATTACHMENT 
        /// </summary>
        public void Delete(System.Int32 Id_Attachment){
            Instance().Delete(Id_Attachment);
        }

        /// <summary>
        /// Delete ATTACHMENT 
        /// </summary>
        public void Delete(Entities.ATTACHMENT entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save ATTACHMENT  
        /// </summary>
        public void Save(Entities.ATTACHMENT entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ATTACHMENT 
        /// </summary>
        public void Insert(Entities.ATTACHMENT entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll ATTACHMENT 
        /// </summary>
        public Entities.ATTACHMENTList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save ATTACHMENT 
        /// </summary>
        public void Save(System.Int32 Id_Attachment, System.Int32 Id_Task, System.String Document_Title, System.String File_Name, System.Boolean Required, System.Byte Id_Status){
            Entities.ATTACHMENT entity = Instance().GetOne(Id_Attachment);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_Attachment", Id_Attachment));

            entity.Id_Task = Id_Task;
            entity.Document_Title = Document_Title;
            entity.File_Name = File_Name;
            entity.Required = Required;
            entity.Id_Status = Id_Status;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ATTACHMENT
        /// </summary>
        public void Insert(System.Int32 Id_Attachment, System.Int32 Id_Task, System.String Document_Title, System.String File_Name, System.Boolean Required, System.Byte Id_Status){
            Entities.ATTACHMENT entity = new Entities.ATTACHMENT();

            entity.Id_Attachment = Id_Attachment;
            entity.Id_Task = Id_Task;
            entity.Document_Title = Document_Title;
            entity.File_Name = File_Name;
            entity.Required = Required;
            entity.Id_Status = Id_Status;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ATTACHMENTLoader<T> : BaseLoader< T, ATTACHMENT, ObjectList<T>>, IGenericGateway where T : ATTACHMENT, new()
    {

        #region "Singleton"

        static ATTACHMENTLoader<T> _instance;

        private ATTACHMENTLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ATTACHMENTLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ATTACHMENTLoader<T>();
                else {
                    ATTACHMENTLoader<T> inst = HttpContext.Current.Items["SISMONRules.ATTACHMENTLoaderSingleton"] as ATTACHMENTLoader<T>;
                    if (inst == null) {
                        inst = new ATTACHMENTLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.ATTACHMENTLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Attachment"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ATTACHMENT);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ATTACHMENT"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ATTACHMENT entity)
        {
            
            IMappeableATTACHMENTObject ATTACHMENT = (IMappeableATTACHMENTObject)entity;
            ATTACHMENT.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetString(3),
reader.GetBoolean(4),
reader.GetByte(5));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.STATUSObject STATUSEntity = null; // Lazy load
Objects.TASKObject TASKEntity = null; // Lazy load
            ((IMappeableATTACHMENT)entity).CompleteEntity(STATUSEntity, TASKEntity);
        }


        



        /// <summary>
        /// Get a ATTACHMENT by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ATTACHMENTList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Attachment)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetOne", Id_Attachment);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", TASK.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", TASK.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





