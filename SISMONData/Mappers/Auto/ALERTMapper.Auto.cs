
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is ALERTMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ALERTMapper : BaseGateway<ALERT, ALERTList>, IGenericGateway
    {


        #region "Singleton"

        static ALERTMapper _instance;

        private ALERTMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ALERTMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ALERTMapper();
                else {
                    ALERTMapper inst = HttpContext.Current.Items["SISMONRules.ALERTMapperSingleton"] as ALERTMapper;
                    if (inst == null) {
                        inst = new ALERTMapper();
                        HttpContext.Current.Items.Add("SISMONRules.ALERTMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Alert"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ALERT);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ALERT"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ALERTMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ALERT entity)
        {
            
            IMappeableALERTObject ALERT = (IMappeableALERTObject)entity;
            ALERT.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetDecimal(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(ALERT entity)
        {

            IMappeableALERTObject ALERT = (IMappeableALERTObject)entity;
            return ALERT.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(ALERT entity)
        {

            IMappeableALERTObject ALERT = (IMappeableALERTObject)entity;
            return ALERT.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(ALERT entity)
        {

            IMappeableALERTObject ALERT = (IMappeableALERTObject)entity;
            return ALERT.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ALERT entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableALERTObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(ALERT entity)
        {
            Objects.ALERT_TYPEObject ALERT_TYPEEntity = null; // Lazy load
            ((IMappeableALERT)entity).CompleteEntity(ALERT_TYPEEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a ALERT by execute a SQL Query Text
        /// </summary>
        public ALERT GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ALERTList by execute a SQL Query Text
        /// </summary>
        public ALERTList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public ALERT GetOne(System.Int32 Id_Alert)
        {
            return base.GetOne(new ALERT(Id_Alert));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ALERTList GetByALERT_TYPE(DbTransaction transaction, System.Int32 Id_Alert_Type)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", Id_Alert_Type);
        }

        /// <summary>
        /// 
        /// </summary>
        public ALERTList GetByALERT_TYPE(DbTransaction transaction, IUniqueIdentifiable ALERT_TYPE)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", ALERT_TYPE.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ALERTList GetByALERT_TYPE(System.Int32 Id_Alert_Type)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", Id_Alert_Type);
        }

        /// <summary>
        /// 
        /// </summary>
        public ALERTList GetByALERT_TYPE(IUniqueIdentifiable ALERT_TYPE)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", ALERT_TYPE.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Alert)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ALERT_Delete", Id_Alert);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Alert)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_Delete", Id_Alert);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByALERT_TYPE(System.Int32 Id_Alert_Type)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ALERT_DeleteByALERT_TYPE", Id_Alert_Type);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByALERT_TYPE(DbTransaction transaction, System.Int32 Id_Alert_Type)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_DeleteByALERT_TYPE", Id_Alert_Type);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByALERT_TYPE(IUniqueIdentifiable ALERT_TYPE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ALERT_DeleteByALERT_TYPE", ALERT_TYPE.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByALERT_TYPE(DbTransaction transaction, IUniqueIdentifiable ALERT_TYPE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_DeleteByALERT_TYPE", ALERT_TYPE.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByAlertType(System.Int32 Id_Alert_Type) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "ALERT_DeleteByAlertType" , Id_Alert_Type);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByAlertType(DbTransaction transaction , System.Int32 Id_Alert_Type) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_DeleteByAlertType" , Id_Alert_Type);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ALERTMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.ALERTMapper Instance()
        {
            return SISMONRules.Mappers.ALERTMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ALERTEntity by calling a Stored Procedure
        /// </summary>
        public Entities.ALERT GetOne(System.Int32 Id_Alert) {
            return Instance().GetOne( Id_Alert);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a ALERTList by calling a Stored Procedure
        /// </summary>
        public Entities.ALERTList GetByALERT_TYPE(System.Int32 Id_Alert_Type)
        {
            return Instance().GetByALERT_TYPE(Id_Alert_Type);
        }

        /// <summary>
        /// Get a ALERTList by calling a Stored Procedure
        /// </summary>
        public Entities.ALERTList GetByALERT_TYPE(IUniqueIdentifiable ALERT_TYPE)
        {
            return Instance().GetByALERT_TYPE(ALERT_TYPE);
        }

    

       

        /// <summary>
        /// Delete children for ALERT
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, ALERT entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete ALERT by ALERT_TYPE
        /// </summary>
        public void DeleteByALERT_TYPE(System.Int32 Id_Alert_Type)
        {
            Instance().DeleteByALERT_TYPE(Id_Alert_Type);
        }

        /// <summary>
        /// Delete ALERT by ALERT_TYPE
        /// </summary>
        public void DeleteByALERT_TYPE(IUniqueIdentifiable ALERT_TYPE)
        {
            Instance().DeleteByALERT_TYPE(ALERT_TYPE);
        }

    
        /// <summary>
        /// Delete ALERT 
        /// </summary>
        public void Delete(System.Int32 Id_Alert){
            Instance().Delete(Id_Alert);
        }

        /// <summary>
        /// Delete ALERT 
        /// </summary>
        public void Delete(Entities.ALERT entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save ALERT  
        /// </summary>
        public void Save(Entities.ALERT entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ALERT 
        /// </summary>
        public void Insert(Entities.ALERT entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll ALERT 
        /// </summary>
        public Entities.ALERTList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save ALERT 
        /// </summary>
        public void Save(System.Int32 Id_Alert, System.Int32 Id_Alert_Type, System.Int32 Days_From_Start, System.Decimal Cost_Percent){
            Entities.ALERT entity = Instance().GetOne(Id_Alert);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_Alert", Id_Alert));

            entity.Id_Alert_Type = Id_Alert_Type;
            entity.Days_From_Start = Days_From_Start;
            entity.Cost_Percent = Cost_Percent;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ALERT
        /// </summary>
        public void Insert(System.Int32 Id_Alert_Type, System.Int32 Days_From_Start, System.Decimal Cost_Percent){
            Entities.ALERT entity = new Entities.ALERT();

            entity.Id_Alert_Type = Id_Alert_Type;
            entity.Days_From_Start = Days_From_Start;
            entity.Cost_Percent = Cost_Percent;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByAlertType(System.Int32 Id_Alert_Type) {
            
                return Instance().DeleteByAlertType( Id_Alert_Type);
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ALERTLoader<T> : BaseLoader< T, ALERT, ObjectList<T>>, IGenericGateway where T : ALERT, new()
    {

        #region "Singleton"

        static ALERTLoader<T> _instance;

        private ALERTLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ALERTLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ALERTLoader<T>();
                else {
                    ALERTLoader<T> inst = HttpContext.Current.Items["SISMONRules.ALERTLoaderSingleton"] as ALERTLoader<T>;
                    if (inst == null) {
                        inst = new ALERTLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.ALERTLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Alert"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ALERT);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ALERT"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ALERT entity)
        {
            
            IMappeableALERTObject ALERT = (IMappeableALERTObject)entity;
            ALERT.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetDecimal(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.ALERT_TYPEObject ALERT_TYPEEntity = null; // Lazy load
            ((IMappeableALERT)entity).CompleteEntity(ALERT_TYPEEntity);
        }


        



        /// <summary>
        /// Get a ALERT by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ALERTList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Alert)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ALERT_GetOne", Id_Alert);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByALERT_TYPE(DbTransaction transaction, System.Int32 Id_Alert_Type)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", Id_Alert_Type);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByALERT_TYPE(DbTransaction transaction, IUniqueIdentifiable ALERT_TYPE)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", ALERT_TYPE.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByALERT_TYPE(System.Int32 Id_Alert_Type)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", Id_Alert_Type);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByALERT_TYPE(IUniqueIdentifiable ALERT_TYPE)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", ALERT_TYPE.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByAlertType(System.Int32 Id_Alert_Type) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "ALERT_DeleteByAlertType" , Id_Alert_Type);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByAlertType(DbTransaction transaction , System.Int32 Id_Alert_Type) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_DeleteByAlertType" , Id_Alert_Type);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





