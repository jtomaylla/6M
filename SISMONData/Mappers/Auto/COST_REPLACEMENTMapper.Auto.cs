
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is COST_REPLACEMENTMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class COST_REPLACEMENTMapper : BaseGateway<COST_REPLACEMENT, COST_REPLACEMENTList>, IGenericGateway
    {


        #region "Singleton"

        static COST_REPLACEMENTMapper _instance;

        private COST_REPLACEMENTMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static COST_REPLACEMENTMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new COST_REPLACEMENTMapper();
                else {
                    COST_REPLACEMENTMapper inst = HttpContext.Current.Items["SISMONRules.COST_REPLACEMENTMapperSingleton"] as COST_REPLACEMENTMapper;
                    if (inst == null) {
                        inst = new COST_REPLACEMENTMapper();
                        HttpContext.Current.Items.Add("SISMONRules.COST_REPLACEMENTMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Keyword"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(COST_REPLACEMENT);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "COST_REPLACEMENT"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(COST_REPLACEMENTMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, COST_REPLACEMENT entity)
        {
            
            IMappeableCOST_REPLACEMENTObject COST_REPLACEMENT = (IMappeableCOST_REPLACEMENTObject)entity;
            COST_REPLACEMENT.HydrateFields(
            reader.GetString(0),
reader.GetDecimal(1),
reader.GetByte(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(COST_REPLACEMENT entity)
        {

            IMappeableCOST_REPLACEMENTObject COST_REPLACEMENT = (IMappeableCOST_REPLACEMENTObject)entity;
            return COST_REPLACEMENT.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(COST_REPLACEMENT entity)
        {

            IMappeableCOST_REPLACEMENTObject COST_REPLACEMENT = (IMappeableCOST_REPLACEMENTObject)entity;
            return COST_REPLACEMENT.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(COST_REPLACEMENT entity)
        {

            IMappeableCOST_REPLACEMENTObject COST_REPLACEMENT = (IMappeableCOST_REPLACEMENTObject)entity;
            return COST_REPLACEMENT.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(COST_REPLACEMENT entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableCOST_REPLACEMENTObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(COST_REPLACEMENT entity)
        {
            Objects.STATUSObject STATUSEntity = null; // Lazy load
            ((IMappeableCOST_REPLACEMENT)entity).CompleteEntity(STATUSEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a COST_REPLACEMENT by execute a SQL Query Text
        /// </summary>
        public COST_REPLACEMENT GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a COST_REPLACEMENTList by execute a SQL Query Text
        /// </summary>
        public COST_REPLACEMENTList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public COST_REPLACEMENT GetOne(System.String Keyword)
        {
            return base.GetOne(new COST_REPLACEMENT(Keyword));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public COST_REPLACEMENTList GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "COST_REPLACEMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public COST_REPLACEMENTList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "COST_REPLACEMENT_GetBySTATUS", STATUS.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public COST_REPLACEMENTList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "COST_REPLACEMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public COST_REPLACEMENTList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "COST_REPLACEMENT_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.String Keyword)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "COST_REPLACEMENT_Delete", Keyword);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.String Keyword)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "COST_REPLACEMENT_Delete", Keyword);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "COST_REPLACEMENT_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "COST_REPLACEMENT_DeleteBySTATUS", Id_Status);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "COST_REPLACEMENT_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "COST_REPLACEMENT_DeleteBySTATUS", STATUS.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class COST_REPLACEMENTMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.COST_REPLACEMENTMapper Instance()
        {
            return SISMONRules.Mappers.COST_REPLACEMENTMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a COST_REPLACEMENTEntity by calling a Stored Procedure
        /// </summary>
        public Entities.COST_REPLACEMENT GetOne(System.String Keyword) {
            return Instance().GetOne( Keyword);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a COST_REPLACEMENTList by calling a Stored Procedure
        /// </summary>
        public Entities.COST_REPLACEMENTList GetBySTATUS(System.Byte Id_Status)
        {
            return Instance().GetBySTATUS(Id_Status);
        }

        /// <summary>
        /// Get a COST_REPLACEMENTList by calling a Stored Procedure
        /// </summary>
        public Entities.COST_REPLACEMENTList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return Instance().GetBySTATUS(STATUS);
        }

    

       

        /// <summary>
        /// Delete children for COST_REPLACEMENT
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, COST_REPLACEMENT entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete COST_REPLACEMENT by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            Instance().DeleteBySTATUS(Id_Status);
        }

        /// <summary>
        /// Delete COST_REPLACEMENT by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            Instance().DeleteBySTATUS(STATUS);
        }

    
        /// <summary>
        /// Delete COST_REPLACEMENT 
        /// </summary>
        public void Delete(System.String Keyword){
            Instance().Delete(Keyword);
        }

        /// <summary>
        /// Delete COST_REPLACEMENT 
        /// </summary>
        public void Delete(Entities.COST_REPLACEMENT entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save COST_REPLACEMENT  
        /// </summary>
        public void Save(Entities.COST_REPLACEMENT entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert COST_REPLACEMENT 
        /// </summary>
        public void Insert(Entities.COST_REPLACEMENT entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll COST_REPLACEMENT 
        /// </summary>
        public Entities.COST_REPLACEMENTList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save COST_REPLACEMENT 
        /// </summary>
        public void Save(System.String Keyword, System.Decimal Cost, System.Byte Id_Status, System.String STATUSString){
            Entities.COST_REPLACEMENT entity = Instance().GetOne(Keyword);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Keyword", Keyword));

            entity.Cost = Cost;
            entity.Id_Status = Id_Status;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert COST_REPLACEMENT
        /// </summary>
        public void Insert(System.String Keyword, System.Decimal Cost, System.Byte Id_Status){
            Entities.COST_REPLACEMENT entity = new Entities.COST_REPLACEMENT();

            entity.Keyword = Keyword;
            entity.Cost = Cost;
            entity.Id_Status = Id_Status;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class COST_REPLACEMENTLoader<T> : BaseLoader< T, COST_REPLACEMENT, ObjectList<T>>, IGenericGateway where T : COST_REPLACEMENT, new()
    {

        #region "Singleton"

        static COST_REPLACEMENTLoader<T> _instance;

        private COST_REPLACEMENTLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static COST_REPLACEMENTLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new COST_REPLACEMENTLoader<T>();
                else {
                    COST_REPLACEMENTLoader<T> inst = HttpContext.Current.Items["SISMONRules.COST_REPLACEMENTLoaderSingleton"] as COST_REPLACEMENTLoader<T>;
                    if (inst == null) {
                        inst = new COST_REPLACEMENTLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.COST_REPLACEMENTLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Keyword"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(COST_REPLACEMENT);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "COST_REPLACEMENT"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, COST_REPLACEMENT entity)
        {
            
            IMappeableCOST_REPLACEMENTObject COST_REPLACEMENT = (IMappeableCOST_REPLACEMENTObject)entity;
            COST_REPLACEMENT.HydrateFields(
            reader.GetString(0),
reader.GetDecimal(1),
reader.GetByte(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.STATUSObject STATUSEntity = null; // Lazy load
            ((IMappeableCOST_REPLACEMENT)entity).CompleteEntity(STATUSEntity);
        }


        



        /// <summary>
        /// Get a COST_REPLACEMENT by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a COST_REPLACEMENTList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.String Keyword)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "COST_REPLACEMENT_GetOne", Keyword);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "COST_REPLACEMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "COST_REPLACEMENT_GetBySTATUS", STATUS.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "COST_REPLACEMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "COST_REPLACEMENT_GetBySTATUS", STATUS.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





