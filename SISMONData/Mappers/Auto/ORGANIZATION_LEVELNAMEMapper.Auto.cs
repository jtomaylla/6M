
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is ORGANIZATION_LEVELNAMEMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ORGANIZATION_LEVELNAMEMapper : BaseGateway<ORGANIZATION_LEVELNAME, ORGANIZATION_LEVELNAMEList>, IGenericGateway
    {


        #region "Singleton"

        static ORGANIZATION_LEVELNAMEMapper _instance;

        private ORGANIZATION_LEVELNAMEMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ORGANIZATION_LEVELNAMEMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ORGANIZATION_LEVELNAMEMapper();
                else {
                    ORGANIZATION_LEVELNAMEMapper inst = HttpContext.Current.Items["SISMONRules.ORGANIZATION_LEVELNAMEMapperSingleton"] as ORGANIZATION_LEVELNAMEMapper;
                    if (inst == null) {
                        inst = new ORGANIZATION_LEVELNAMEMapper();
                        HttpContext.Current.Items.Add("SISMONRules.ORGANIZATION_LEVELNAMEMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Level","Id_Organization"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ORGANIZATION_LEVELNAME);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ORGANIZATION_LEVELNAME"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ORGANIZATION_LEVELNAMEMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ORGANIZATION_LEVELNAME entity)
        {
            
            IMappeableORGANIZATION_LEVELNAMEObject ORGANIZATION_LEVELNAME = (IMappeableORGANIZATION_LEVELNAMEObject)entity;
            ORGANIZATION_LEVELNAME.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(ORGANIZATION_LEVELNAME entity)
        {

            IMappeableORGANIZATION_LEVELNAMEObject ORGANIZATION_LEVELNAME = (IMappeableORGANIZATION_LEVELNAMEObject)entity;
            return ORGANIZATION_LEVELNAME.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(ORGANIZATION_LEVELNAME entity)
        {

            IMappeableORGANIZATION_LEVELNAMEObject ORGANIZATION_LEVELNAME = (IMappeableORGANIZATION_LEVELNAMEObject)entity;
            return ORGANIZATION_LEVELNAME.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(ORGANIZATION_LEVELNAME entity)
        {

            IMappeableORGANIZATION_LEVELNAMEObject ORGANIZATION_LEVELNAME = (IMappeableORGANIZATION_LEVELNAMEObject)entity;
            return ORGANIZATION_LEVELNAME.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ORGANIZATION_LEVELNAME entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableORGANIZATION_LEVELNAMEObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(ORGANIZATION_LEVELNAME entity)
        {
            
            ((IMappeableORGANIZATION_LEVELNAME)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a ORGANIZATION_LEVELNAME by execute a SQL Query Text
        /// </summary>
        public ORGANIZATION_LEVELNAME GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEList by execute a SQL Query Text
        /// </summary>
        public ORGANIZATION_LEVELNAMEList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATION_LEVELNAME GetOne(System.Int32 Level, System.Int32 Id_Organization)
        {
            return base.GetOne(new ORGANIZATION_LEVELNAME(Level, Id_Organization));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATION_LEVELNAMEList GetByORGANIZATION(DbTransaction transaction, System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATION_LEVELNAMEList GetByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATION_LEVELNAMEList GetByORGANIZATION(System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATION_LEVELNAMEList GetByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Level, System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_Delete", Level, Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Level, System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_Delete", Level, Id_Organization);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByORGANIZATION(System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByORGANIZATION(DbTransaction transaction, System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByORGANIZATION", Id_Organization);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByORGANIZATION", ORGANIZATION.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByORGANIZATION", ORGANIZATION.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByOrganization(System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByOrganization" , Id_Organization);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByOrganization(DbTransaction transaction , System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByOrganization" , Id_Organization);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 OrderPosition(System.Int32 FatherID, System.Int32 SonID, System.String FatherName, System.String SonName, System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_OrderPosition" , FatherID, SonID, FatherName, SonName, Id_Organization);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 OrderPosition(DbTransaction transaction , System.Int32 FatherID, System.Int32 SonID, System.String FatherName, System.String SonName, System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_OrderPosition" , FatherID, SonID, FatherName, SonName, Id_Organization);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ORGANIZATION_LEVELNAMEMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.ORGANIZATION_LEVELNAMEMapper Instance()
        {
            return SISMONRules.Mappers.ORGANIZATION_LEVELNAMEMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEEntity by calling a Stored Procedure
        /// </summary>
        public Entities.ORGANIZATION_LEVELNAME GetOne(System.Int32 Level, System.Int32 Id_Organization) {
            return Instance().GetOne( Level, Id_Organization);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEList by calling a Stored Procedure
        /// </summary>
        public Entities.ORGANIZATION_LEVELNAMEList GetByORGANIZATION(System.Int32 Id_Organization)
        {
            return Instance().GetByORGANIZATION(Id_Organization);
        }

        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEList by calling a Stored Procedure
        /// </summary>
        public Entities.ORGANIZATION_LEVELNAMEList GetByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            return Instance().GetByORGANIZATION(ORGANIZATION);
        }

    

       

        /// <summary>
        /// Delete children for ORGANIZATION_LEVELNAME
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, ORGANIZATION_LEVELNAME entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(System.Int32 Id_Organization)
        {
            Instance().DeleteByORGANIZATION(Id_Organization);
        }

        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            Instance().DeleteByORGANIZATION(ORGANIZATION);
        }

    
        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME 
        /// </summary>
        public void Delete(System.Int32 Level, System.Int32 Id_Organization){
            Instance().Delete(Level, Id_Organization);
        }

        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME 
        /// </summary>
        public void Delete(Entities.ORGANIZATION_LEVELNAME entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save ORGANIZATION_LEVELNAME  
        /// </summary>
        public void Save(Entities.ORGANIZATION_LEVELNAME entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ORGANIZATION_LEVELNAME 
        /// </summary>
        public void Insert(Entities.ORGANIZATION_LEVELNAME entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll ORGANIZATION_LEVELNAME 
        /// </summary>
        public Entities.ORGANIZATION_LEVELNAMEList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save ORGANIZATION_LEVELNAME 
        /// </summary>
        public void Save(System.Int32 Level, System.Int32 Id_Organization, System.String Name, System.String ORGANIZATIONString){
            Entities.ORGANIZATION_LEVELNAME entity = Instance().GetOne(Level, Id_Organization);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}, {2} = {3}", "Level", Level, "Id_Organization", Id_Organization));

            entity.Name = Name;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ORGANIZATION_LEVELNAME
        /// </summary>
        public void Insert(System.Int32 Level, System.Int32 Id_Organization, System.String Name){
            Entities.ORGANIZATION_LEVELNAME entity = new Entities.ORGANIZATION_LEVELNAME();

            entity.Level = Level;
            entity.Id_Organization = Id_Organization;
            entity.Name = Name;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByOrganization(System.Int32 Id_Organization) {
            
                return Instance().DeleteByOrganization( Id_Organization);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 OrderPosition(System.Int32 FatherID, System.Int32 SonID, System.String FatherName, System.String SonName, System.Int32 Id_Organization) {
            
                return Instance().OrderPosition( FatherID, SonID, FatherName, SonName, Id_Organization);
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ORGANIZATION_LEVELNAMELoader<T> : BaseLoader< T, ORGANIZATION_LEVELNAME, ObjectList<T>>, IGenericGateway where T : ORGANIZATION_LEVELNAME, new()
    {

        #region "Singleton"

        static ORGANIZATION_LEVELNAMELoader<T> _instance;

        private ORGANIZATION_LEVELNAMELoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ORGANIZATION_LEVELNAMELoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ORGANIZATION_LEVELNAMELoader<T>();
                else {
                    ORGANIZATION_LEVELNAMELoader<T> inst = HttpContext.Current.Items["SISMONRules.ORGANIZATION_LEVELNAMELoaderSingleton"] as ORGANIZATION_LEVELNAMELoader<T>;
                    if (inst == null) {
                        inst = new ORGANIZATION_LEVELNAMELoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.ORGANIZATION_LEVELNAMELoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Level","Id_Organization"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ORGANIZATION_LEVELNAME);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ORGANIZATION_LEVELNAME"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ORGANIZATION_LEVELNAME entity)
        {
            
            IMappeableORGANIZATION_LEVELNAMEObject ORGANIZATION_LEVELNAME = (IMappeableORGANIZATION_LEVELNAMEObject)entity;
            ORGANIZATION_LEVELNAME.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableORGANIZATION_LEVELNAME)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a ORGANIZATION_LEVELNAME by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Level, System.Int32 Id_Organization)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetOne", Level, Id_Organization);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByORGANIZATION(DbTransaction transaction, System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByORGANIZATION(System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByOrganization(System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByOrganization" , Id_Organization);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByOrganization(DbTransaction transaction , System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByOrganization" , Id_Organization);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 OrderPosition(System.Int32 FatherID, System.Int32 SonID, System.String FatherName, System.String SonName, System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_OrderPosition" , FatherID, SonID, FatherName, SonName, Id_Organization);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 OrderPosition(DbTransaction transaction , System.Int32 FatherID, System.Int32 SonID, System.String FatherName, System.String SonName, System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_OrderPosition" , FatherID, SonID, FatherName, SonName, Id_Organization);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





