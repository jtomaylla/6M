
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is DEPENDENCYMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class DEPENDENCYMapper : BaseGateway<DEPENDENCY, DEPENDENCYList>, IGenericGateway
    {


        #region "Singleton"

        static DEPENDENCYMapper _instance;

        private DEPENDENCYMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static DEPENDENCYMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new DEPENDENCYMapper();
                else {
                    DEPENDENCYMapper inst = HttpContext.Current.Items["SISMONRules.DEPENDENCYMapperSingleton"] as DEPENDENCYMapper;
                    if (inst == null) {
                        inst = new DEPENDENCYMapper();
                        HttpContext.Current.Items.Add("SISMONRules.DEPENDENCYMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Dependency"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(DEPENDENCY);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "DEPENDENCY"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(DEPENDENCYMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, DEPENDENCY entity)
        {
            
            IMappeableDEPENDENCYObject DEPENDENCY = (IMappeableDEPENDENCYObject)entity;
            DEPENDENCY.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetInt32(3),
reader.GetInt32(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(DEPENDENCY entity)
        {

            IMappeableDEPENDENCYObject DEPENDENCY = (IMappeableDEPENDENCYObject)entity;
            return DEPENDENCY.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(DEPENDENCY entity)
        {

            IMappeableDEPENDENCYObject DEPENDENCY = (IMappeableDEPENDENCYObject)entity;
            return DEPENDENCY.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(DEPENDENCY entity)
        {

            IMappeableDEPENDENCYObject DEPENDENCY = (IMappeableDEPENDENCYObject)entity;
            return DEPENDENCY.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(DEPENDENCY entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableDEPENDENCYObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(DEPENDENCY entity)
        {
            Objects.PROJECTObject PROJECTEntity = null; // Lazy load
            ((IMappeableDEPENDENCY)entity).CompleteEntity(PROJECTEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a DEPENDENCY by execute a SQL Query Text
        /// </summary>
        public DEPENDENCY GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a DEPENDENCYList by execute a SQL Query Text
        /// </summary>
        public DEPENDENCYList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCY GetOne(System.Int32 Id_Dependency)
        {
            return base.GetOne(new DEPENDENCY(Id_Dependency));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCYList GetByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "DEPENDENCY_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCYList GetByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "DEPENDENCY_GetByPROJECT", PROJECT.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCYList GetByPROJECT(System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCYList GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Dependency)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_Delete", Id_Dependency);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Dependency)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "DEPENDENCY_Delete", Id_Dependency);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_DeleteByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "DEPENDENCY_DeleteByPROJECT", Id_Project);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(IUniqueIdentifiable PROJECT)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_DeleteByPROJECT", PROJECT.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "DEPENDENCY_DeleteByPROJECT", PROJECT.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCYList GetAllByProject(System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_GetAllByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCYList GetAllByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "DEPENDENCY_GetAllByProject" , Id_Project);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class DEPENDENCYMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.DEPENDENCYMapper Instance()
        {
            return SISMONRules.Mappers.DEPENDENCYMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a DEPENDENCYEntity by calling a Stored Procedure
        /// </summary>
        public Entities.DEPENDENCY GetOne(System.Int32 Id_Dependency) {
            return Instance().GetOne( Id_Dependency);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a DEPENDENCYList by calling a Stored Procedure
        /// </summary>
        public Entities.DEPENDENCYList GetByPROJECT(System.Int32 Id_Project)
        {
            return Instance().GetByPROJECT(Id_Project);
        }

        /// <summary>
        /// Get a DEPENDENCYList by calling a Stored Procedure
        /// </summary>
        public Entities.DEPENDENCYList GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return Instance().GetByPROJECT(PROJECT);
        }

    

       

        /// <summary>
        /// Delete children for DEPENDENCY
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, DEPENDENCY entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete DEPENDENCY by PROJECT
        /// </summary>
        public void DeleteByPROJECT(System.Int32 Id_Project)
        {
            Instance().DeleteByPROJECT(Id_Project);
        }

        /// <summary>
        /// Delete DEPENDENCY by PROJECT
        /// </summary>
        public void DeleteByPROJECT(IUniqueIdentifiable PROJECT)
        {
            Instance().DeleteByPROJECT(PROJECT);
        }

    
        /// <summary>
        /// Delete DEPENDENCY 
        /// </summary>
        public void Delete(System.Int32 Id_Dependency){
            Instance().Delete(Id_Dependency);
        }

        /// <summary>
        /// Delete DEPENDENCY 
        /// </summary>
        public void Delete(Entities.DEPENDENCY entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save DEPENDENCY  
        /// </summary>
        public void Save(Entities.DEPENDENCY entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert DEPENDENCY 
        /// </summary>
        public void Insert(Entities.DEPENDENCY entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll DEPENDENCY 
        /// </summary>
        public Entities.DEPENDENCYList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save DEPENDENCY 
        /// </summary>
        public void Save(System.Int32 Id_Dependency, System.Int32 Id_Predecessor, System.Int32 Id_Successor, System.Int32 Type, System.Int32 Id_Project){
            Entities.DEPENDENCY entity = Instance().GetOne(Id_Dependency);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_Dependency", Id_Dependency));

            entity.Id_Predecessor = Id_Predecessor;
            entity.Id_Successor = Id_Successor;
            entity.Type = Type;
            entity.Id_Project = Id_Project;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert DEPENDENCY
        /// </summary>
        public void Insert(System.Int32 Id_Predecessor, System.Int32 Id_Successor, System.Int32 Type, System.Int32 Id_Project){
            Entities.DEPENDENCY entity = new Entities.DEPENDENCY();

            entity.Id_Predecessor = Id_Predecessor;
            entity.Id_Successor = Id_Successor;
            entity.Type = Type;
            entity.Id_Project = Id_Project;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public DEPENDENCYList GetAllByProject(System.Int32 Id_Project) {
            
                return Instance().GetAllByProject( Id_Project);
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class DEPENDENCYLoader<T> : BaseLoader< T, DEPENDENCY, ObjectList<T>>, IGenericGateway where T : DEPENDENCY, new()
    {

        #region "Singleton"

        static DEPENDENCYLoader<T> _instance;

        private DEPENDENCYLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static DEPENDENCYLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new DEPENDENCYLoader<T>();
                else {
                    DEPENDENCYLoader<T> inst = HttpContext.Current.Items["SISMONRules.DEPENDENCYLoaderSingleton"] as DEPENDENCYLoader<T>;
                    if (inst == null) {
                        inst = new DEPENDENCYLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.DEPENDENCYLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Dependency"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(DEPENDENCY);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "DEPENDENCY"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, DEPENDENCY entity)
        {
            
            IMappeableDEPENDENCYObject DEPENDENCY = (IMappeableDEPENDENCYObject)entity;
            DEPENDENCY.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetInt32(3),
reader.GetInt32(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.PROJECTObject PROJECTEntity = null; // Lazy load
            ((IMappeableDEPENDENCY)entity).CompleteEntity(PROJECTEntity);
        }


        



        /// <summary>
        /// Get a DEPENDENCY by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a DEPENDENCYList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Dependency)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_GetOne", Id_Dependency);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "DEPENDENCY_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "DEPENDENCY_GetByPROJECT", PROJECT.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_GetByPROJECT", PROJECT.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetAllByProject(System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "DEPENDENCY_GetAllByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetAllByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "DEPENDENCY_GetAllByProject" , Id_Project);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





