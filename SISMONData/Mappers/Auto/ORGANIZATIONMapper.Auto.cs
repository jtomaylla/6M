
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is ORGANIZATIONMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ORGANIZATIONMapper : BaseGateway<ORGANIZATION, ORGANIZATIONList>, IGenericGateway
    {


        #region "Singleton"

        static ORGANIZATIONMapper _instance;

        private ORGANIZATIONMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ORGANIZATIONMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ORGANIZATIONMapper();
                else {
                    ORGANIZATIONMapper inst = HttpContext.Current.Items["SISMONRules.ORGANIZATIONMapperSingleton"] as ORGANIZATIONMapper;
                    if (inst == null) {
                        inst = new ORGANIZATIONMapper();
                        HttpContext.Current.Items.Add("SISMONRules.ORGANIZATIONMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Organization"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ORGANIZATION);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ORGANIZATION"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ORGANIZATIONMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ORGANIZATION entity)
        {
            
            IMappeableORGANIZATIONObject ORGANIZATION = (IMappeableORGANIZATIONObject)entity;
            ORGANIZATION.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetByte(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(ORGANIZATION entity)
        {

            IMappeableORGANIZATIONObject ORGANIZATION = (IMappeableORGANIZATIONObject)entity;
            return ORGANIZATION.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(ORGANIZATION entity)
        {

            IMappeableORGANIZATIONObject ORGANIZATION = (IMappeableORGANIZATIONObject)entity;
            return ORGANIZATION.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(ORGANIZATION entity)
        {

            IMappeableORGANIZATIONObject ORGANIZATION = (IMappeableORGANIZATIONObject)entity;
            return ORGANIZATION.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ORGANIZATION entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableORGANIZATIONObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(ORGANIZATION entity)
        {
            Entities.ORGANIZATION_LEVELNAMEList ORGANIZATION_LEVELNAMECollection = null; // Lazy load
Objects.STATUSObject STATUSEntity = null; // Lazy load
            ((IMappeableORGANIZATION)entity).CompleteEntity(ORGANIZATION_LEVELNAMECollection, STATUSEntity);
        }


        # region CRUD Operations
        
        /// <summary>
        /// 
        /// </summary>
        public override void Insert(ORGANIZATION entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Insert(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Insert(DbTransaction transaction, ORGANIZATION entity)
        {
            base.Insert(transaction, entity);
            ((IMappeableORGANIZATION)entity).SetFKValuesForChilds(entity);
            
            if (!((IMappeableORGANIZATION)entity).IsORGANIZATION_LEVELNAMECollectionNull()) {
                
                Mappers.ORGANIZATION_LEVELNAMEMapper.Instance().Append(transaction, entity.ORGANIZATION_LEVELNAMECollection);
            }
                        
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Delete(ORGANIZATION entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Delete(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public override void Delete(DbTransaction transaction, ORGANIZATION entity)
        {
            DeleteChildren(transaction, entity);
            base.Delete(transaction, entity);
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Save(ORGANIZATION entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Save(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Save(DbTransaction transaction, ORGANIZATION entity)
        {
            base.Save(transaction, entity);
            ((IMappeableORGANIZATION)entity).SetFKValuesForChilds(entity);
            
            if (!((IMappeableORGANIZATION)entity).IsORGANIZATION_LEVELNAMECollectionNull()) {
                
                
                Mappers.ORGANIZATION_LEVELNAMEMapper.Instance().Update(transaction, entity.ORGANIZATION_LEVELNAMECollection);
                
            }
                        
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Update(ORGANIZATIONList entityList)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Update(DbTransaction transaction, ORGANIZATIONList entityList)
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {


                IObjectList<ORGANIZATION> deletedItems = ((IObjectList<ORGANIZATION>)entityList).DeletedItems();
                foreach (ORGANIZATION entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (ORGANIZATION entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<ORGANIZATION>)entityList).ResetDeletedItems();


                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(ObjectList<T> entityList)  where T : IObject, new()
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update<T>(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(DbTransaction transaction, ObjectList<T> entityList)   where T : IObject, new()
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {

                IObjectList<T> deletedItems = ((IObjectList<T>)entityList).DeletedItems();
                foreach (T entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity as ORGANIZATION);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (T entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity as ORGANIZATION);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity as ORGANIZATION);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity as ORGANIZATION);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<T>)entityList).ResetDeletedItems();

                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }


       

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
            
bool haveChild = false;                                                
                foreach (IUniqueIdentifiable child in Gateways.ORGANIZATION_LEVELNAMEGateway.Instance().GetByORGANIZATION(transaction, entity))
                {
                    Mappers.ORGANIZATION_LEVELNAMEMapper.Instance().DeleteChildren(transaction, child);
                    haveChild = true;
                }
                
                if (haveChild) 
                Mappers.ORGANIZATION_LEVELNAMEMapper.Instance().DeleteByORGANIZATION(transaction, entity);
                        
        }


          





        /// <summary>
        /// Get a ORGANIZATION by execute a SQL Query Text
        /// </summary>
        public ORGANIZATION GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ORGANIZATIONList by execute a SQL Query Text
        /// </summary>
        public ORGANIZATIONList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATION GetOne(System.Int32 Id_Organization)
        {
            return base.GetOne(new ORGANIZATION(Id_Organization));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATIONList GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATIONList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_GetBySTATUS", STATUS.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATIONList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ORGANIZATIONList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_Delete", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_Delete", Id_Organization);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_DeleteBySTATUS", Id_Status);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_DeleteBySTATUS", STATUS.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ORGANIZATIONMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.ORGANIZATIONMapper Instance()
        {
            return SISMONRules.Mappers.ORGANIZATIONMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ORGANIZATIONEntity by calling a Stored Procedure
        /// </summary>
        public Entities.ORGANIZATION GetOne(System.Int32 Id_Organization) {
            return Instance().GetOne( Id_Organization);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a ORGANIZATIONList by calling a Stored Procedure
        /// </summary>
        public Entities.ORGANIZATIONList GetBySTATUS(System.Byte Id_Status)
        {
            return Instance().GetBySTATUS(Id_Status);
        }

        /// <summary>
        /// Get a ORGANIZATIONList by calling a Stored Procedure
        /// </summary>
        public Entities.ORGANIZATIONList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return Instance().GetBySTATUS(STATUS);
        }

    

       

        /// <summary>
        /// Delete children for ORGANIZATION
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, ORGANIZATION entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete ORGANIZATION by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            Instance().DeleteBySTATUS(Id_Status);
        }

        /// <summary>
        /// Delete ORGANIZATION by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            Instance().DeleteBySTATUS(STATUS);
        }

    
        /// <summary>
        /// Delete ORGANIZATION 
        /// </summary>
        public void Delete(System.Int32 Id_Organization){
            Instance().Delete(Id_Organization);
        }

        /// <summary>
        /// Delete ORGANIZATION 
        /// </summary>
        public void Delete(Entities.ORGANIZATION entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save ORGANIZATION  
        /// </summary>
        public void Save(Entities.ORGANIZATION entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ORGANIZATION 
        /// </summary>
        public void Insert(Entities.ORGANIZATION entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll ORGANIZATION 
        /// </summary>
        public Entities.ORGANIZATIONList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save ORGANIZATION 
        /// </summary>
        public void Save(System.Int32 Id_Organization, System.String Name, System.String Description, System.Byte Id_Status, System.String STATUSString){
            Entities.ORGANIZATION entity = Instance().GetOne(Id_Organization);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_Organization", Id_Organization));

            entity.Name = Name;
            entity.Description = Description;
            entity.Id_Status = Id_Status;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert ORGANIZATION
        /// </summary>
        public void Insert(System.String Name, System.String Description, System.Byte Id_Status){
            Entities.ORGANIZATION entity = new Entities.ORGANIZATION();

            entity.Name = Name;
            entity.Description = Description;
            entity.Id_Status = Id_Status;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ORGANIZATIONLoader<T> : BaseLoader< T, ORGANIZATION, ObjectList<T>>, IGenericGateway where T : ORGANIZATION, new()
    {

        #region "Singleton"

        static ORGANIZATIONLoader<T> _instance;

        private ORGANIZATIONLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ORGANIZATIONLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ORGANIZATIONLoader<T>();
                else {
                    ORGANIZATIONLoader<T> inst = HttpContext.Current.Items["SISMONRules.ORGANIZATIONLoaderSingleton"] as ORGANIZATIONLoader<T>;
                    if (inst == null) {
                        inst = new ORGANIZATIONLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.ORGANIZATIONLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Organization"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(ORGANIZATION);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "ORGANIZATION"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ORGANIZATION entity)
        {
            
            IMappeableORGANIZATIONObject ORGANIZATION = (IMappeableORGANIZATIONObject)entity;
            ORGANIZATION.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetByte(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.ORGANIZATION_LEVELNAMEList ORGANIZATION_LEVELNAMECollection = null; // Lazy load
Objects.STATUSObject STATUSEntity = null; // Lazy load
            ((IMappeableORGANIZATION)entity).CompleteEntity(ORGANIZATION_LEVELNAMECollection, STATUSEntity);
        }


        



        /// <summary>
        /// Get a ORGANIZATION by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ORGANIZATIONList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Organization)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_GetOne", Id_Organization);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_GetBySTATUS", STATUS.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_GetBySTATUS", STATUS.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





