
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is TASKMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class TASKMapper : BaseGateway<TASK, TASKList>, IGenericGateway
    {


        #region "Singleton"

        static TASKMapper _instance;

        private TASKMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static TASKMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TASKMapper();
                else {
                    TASKMapper inst = HttpContext.Current.Items["SISMONRules.TASKMapperSingleton"] as TASKMapper;
                    if (inst == null) {
                        inst = new TASKMapper();
                        HttpContext.Current.Items.Add("SISMONRules.TASKMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Task"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(TASK);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "TASK"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(TASKMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, TASK entity)
        {
            
            IMappeableTASKObject TASK = (IMappeableTASKObject)entity;
            TASK.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? new System.Nullable<System.Int32>() : reader.GetInt32(1),
reader.GetInt32(2),
reader.GetString(3),
(reader.IsDBNull(4)) ? new System.Nullable<System.Decimal>() : reader.GetDecimal(4),
reader.GetDateTime(5),
reader.GetDateTime(6),
(reader.IsDBNull(7)) ? new System.Nullable<System.Decimal>() : reader.GetDecimal(7),
(reader.IsDBNull(8)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(8),
reader.GetDecimal(9),
(reader.IsDBNull(10)) ? new System.Nullable<System.Boolean>() : reader.GetBoolean(10),
reader.GetBoolean(11),
(reader.IsDBNull(12)) ? new System.Nullable<System.Int32>() : reader.GetInt32(12),
reader.GetInt32(13),
reader.GetByte(14),
reader.GetBoolean(15),
(reader.IsDBNull(16)) ? "" : reader.GetString(16),
reader.GetBoolean(17),
(reader.IsDBNull(18)) ? "" : reader.GetString(18),
(reader.IsDBNull(19)) ? "" : reader.GetString(19));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(TASK entity)
        {

            IMappeableTASKObject TASK = (IMappeableTASKObject)entity;
            return TASK.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(TASK entity)
        {

            IMappeableTASKObject TASK = (IMappeableTASKObject)entity;
            return TASK.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(TASK entity)
        {

            IMappeableTASKObject TASK = (IMappeableTASKObject)entity;
            return TASK.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(TASK entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableTASKObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(TASK entity)
        {
            Entities.RESOURCEList RESOURCECollection = null; // Lazy load
Entities.TASK_CONFIGURATIONList TASK_CONFIGURATIONCollection = null; // Lazy load
Objects.PROJECTObject PROJECTEntity = null; // Lazy load
Objects.STATUSObject STATUSEntity = null; // Lazy load
Objects.TASKObject TASKEntity = null; // Lazy load
            ((IMappeableTASK)entity).CompleteEntity(RESOURCECollection, TASK_CONFIGURATIONCollection, PROJECTEntity, STATUSEntity, TASKEntity);
        }


        # region CRUD Operations
        
        /// <summary>
        /// 
        /// </summary>
        public override void Insert(TASK entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Insert(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Insert(DbTransaction transaction, TASK entity)
        {
            base.Insert(transaction, entity);
            ((IMappeableTASK)entity).SetFKValuesForChilds(entity);
            
            if (!((IMappeableTASK)entity).IsRESOURCECollectionNull()) {
                
                Mappers.RESOURCEMapper.Instance().Append(transaction, entity.RESOURCECollection);
            }
            
            if (!((IMappeableTASK)entity).IsTASK_CONFIGURATIONCollectionNull()) {
                
                Mappers.TASK_CONFIGURATIONMapper.Instance().Append(transaction, entity.TASK_CONFIGURATIONCollection);
            }
                        
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Delete(TASK entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Delete(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public override void Delete(DbTransaction transaction, TASK entity)
        {
            DeleteChildren(transaction, entity);
            base.Delete(transaction, entity);
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Save(TASK entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Save(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Save(DbTransaction transaction, TASK entity)
        {
            base.Save(transaction, entity);
            ((IMappeableTASK)entity).SetFKValuesForChilds(entity);
            
            if (!((IMappeableTASK)entity).IsRESOURCECollectionNull()) {
                
                
                Mappers.RESOURCEMapper.Instance().Update(transaction, entity.RESOURCECollection);
                
            }
            
            if (!((IMappeableTASK)entity).IsTASK_CONFIGURATIONCollectionNull()) {
                
                
                Mappers.TASK_CONFIGURATIONMapper.Instance().Update(transaction, entity.TASK_CONFIGURATIONCollection);
                
            }
                        
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Update(TASKList entityList)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Update(DbTransaction transaction, TASKList entityList)
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {


                IObjectList<TASK> deletedItems = ((IObjectList<TASK>)entityList).DeletedItems();
                foreach (TASK entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (TASK entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<TASK>)entityList).ResetDeletedItems();


                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(ObjectList<T> entityList)  where T : IObject, new()
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update<T>(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(DbTransaction transaction, ObjectList<T> entityList)   where T : IObject, new()
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {

                IObjectList<T> deletedItems = ((IObjectList<T>)entityList).DeletedItems();
                foreach (T entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity as TASK);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (T entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity as TASK);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity as TASK);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity as TASK);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<T>)entityList).ResetDeletedItems();

                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }


       

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
            
bool haveChild = false;                                                
                foreach (IUniqueIdentifiable child in Gateways.RESOURCEGateway.Instance().GetByTASK(transaction, entity))
                {
                    Mappers.RESOURCEMapper.Instance().DeleteChildren(transaction, child);
                    haveChild = true;
                }
                
                if (haveChild) 
                Mappers.RESOURCEMapper.Instance().DeleteByTASK(transaction, entity);
            
haveChild = false;                                                
                foreach (IUniqueIdentifiable child in Gateways.TASK_CONFIGURATIONGateway.Instance().GetByTASK(transaction, entity))
                {
                    Mappers.TASK_CONFIGURATIONMapper.Instance().DeleteChildren(transaction, child);
                    haveChild = true;
                }
                
                if (haveChild) 
                Mappers.TASK_CONFIGURATIONMapper.Instance().DeleteByTASK(transaction, entity);
                        
        }


          





        /// <summary>
        /// Get a TASK by execute a SQL Query Text
        /// </summary>
        public TASK GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TASKList by execute a SQL Query Text
        /// </summary>
        public TASKList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public TASK GetOne(System.Int32 Id_Task)
        {
            return base.GetOne(new TASK(Id_Task));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetByTASK(DbTransaction transaction, System.Int32 Id_Task_Parent)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByTASK", Id_Task_Parent);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByTASK", TASK.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetByPROJECT(System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetByTASK(System.Int32 Id_Task_Parent)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByTASK", Id_Task_Parent);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_Delete", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_Delete", Id_Task);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteByPROJECT", Id_Project);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(IUniqueIdentifiable PROJECT)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteByPROJECT", PROJECT.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteByPROJECT", PROJECT.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteBySTATUS", Id_Status);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteBySTATUS", STATUS.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task_Parent)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteByTASK", Id_Task_Parent);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, System.Int32 Id_Task_Parent)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteByTASK", Id_Task_Parent);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteByTASK", TASK.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteByTASK", TASK.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public TASKList GetAllByProject(System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetAllByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public TASKList GetAllByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetAllByProject" , Id_Project);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateOwner(System.Int32 Id_Task, System.String Description, System.Decimal Initial_Cost, System.Int32 Alert_Days_From_End, System.Boolean EmailAlert, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_PartialUpdateOwner" , Id_Task, Description, Initial_Cost, Alert_Days_From_End, EmailAlert, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateOwner(DbTransaction transaction , System.Int32 Id_Task, System.String Description, System.Decimal Initial_Cost, System.Int32 Alert_Days_From_End, System.Boolean EmailAlert, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_PartialUpdateOwner" , Id_Task, Description, Initial_Cost, Alert_Days_From_End, EmailAlert, Id_Status);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_ChangeStatus" , Id_Task, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(DbTransaction transaction , System.Int32 Id_Task, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_ChangeStatus" , Id_Task, Id_Status);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateCollaborator(System.Int32 Id_Task, System.Decimal Final_Cost, System.DateTime Final_End, System.Decimal Percent_Complete, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_PartialUpdateCollaborator" , Id_Task, Final_Cost, Final_End, Percent_Complete, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateCollaborator(DbTransaction transaction , System.Int32 Id_Task, System.Decimal Final_Cost, System.DateTime Final_End, System.Decimal Percent_Complete, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_PartialUpdateCollaborator" , Id_Task, Final_Cost, Final_End, Percent_Complete, Id_Status);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 UpdatePercentComplete(System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_UpdatePercentComplete" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 UpdatePercentComplete(DbTransaction transaction , System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_UpdatePercentComplete" , Id_User);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetAllByUser(System.Int32 Id_User) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(StoredProceduresPrefix() + "TASK_GetAllByUser" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetAllByUser(DbTransaction transaction , System.Int32 Id_User) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetAllByUser" , Id_User);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ReplaceCost(System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_ReplaceCost" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ReplaceCost(DbTransaction transaction , System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_ReplaceCost" , Id_Task);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetTaskAlerts() {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(StoredProceduresPrefix() + "TASK_GetTaskAlerts" );
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetTaskAlerts(DbTransaction transaction ) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetTaskAlerts" );
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class TASKMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.TASKMapper Instance()
        {
            return SISMONRules.Mappers.TASKMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a TASKEntity by calling a Stored Procedure
        /// </summary>
        public Entities.TASK GetOne(System.Int32 Id_Task) {
            return Instance().GetOne( Id_Task);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a TASKList by calling a Stored Procedure
        /// </summary>
        public Entities.TASKList GetByPROJECT(System.Int32 Id_Project)
        {
            return Instance().GetByPROJECT(Id_Project);
        }

        /// <summary>
        /// Get a TASKList by calling a Stored Procedure
        /// </summary>
        public Entities.TASKList GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return Instance().GetByPROJECT(PROJECT);
        }

    

        /// <summary>
        /// Get a TASKList by calling a Stored Procedure
        /// </summary>
        public Entities.TASKList GetBySTATUS(System.Byte Id_Status)
        {
            return Instance().GetBySTATUS(Id_Status);
        }

        /// <summary>
        /// Get a TASKList by calling a Stored Procedure
        /// </summary>
        public Entities.TASKList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return Instance().GetBySTATUS(STATUS);
        }

    

        /// <summary>
        /// Get a TASKList by calling a Stored Procedure
        /// </summary>
        public Entities.TASKList GetByTASK(System.Int32 Id_Task_Parent)
        {
            return Instance().GetByTASK(Id_Task_Parent);
        }

        /// <summary>
        /// Get a TASKList by calling a Stored Procedure
        /// </summary>
        public Entities.TASKList GetByTASK(IUniqueIdentifiable TASK)
        {
            return Instance().GetByTASK(TASK);
        }

    

       

        /// <summary>
        /// Delete children for TASK
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, TASK entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete TASK by PROJECT
        /// </summary>
        public void DeleteByPROJECT(System.Int32 Id_Project)
        {
            Instance().DeleteByPROJECT(Id_Project);
        }

        /// <summary>
        /// Delete TASK by PROJECT
        /// </summary>
        public void DeleteByPROJECT(IUniqueIdentifiable PROJECT)
        {
            Instance().DeleteByPROJECT(PROJECT);
        }

    

        /// <summary>
        /// Delete TASK by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            Instance().DeleteBySTATUS(Id_Status);
        }

        /// <summary>
        /// Delete TASK by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            Instance().DeleteBySTATUS(STATUS);
        }

    

        /// <summary>
        /// Delete TASK by TASK
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task_Parent)
        {
            Instance().DeleteByTASK(Id_Task_Parent);
        }

        /// <summary>
        /// Delete TASK by TASK
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            Instance().DeleteByTASK(TASK);
        }

    
        /// <summary>
        /// Delete TASK 
        /// </summary>
        public void Delete(System.Int32 Id_Task){
            Instance().Delete(Id_Task);
        }

        /// <summary>
        /// Delete TASK 
        /// </summary>
        public void Delete(Entities.TASK entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save TASK  
        /// </summary>
        public void Save(Entities.TASK entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert TASK 
        /// </summary>
        public void Insert(Entities.TASK entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll TASK 
        /// </summary>
        public Entities.TASKList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save TASK 
        /// </summary>
        public void Save(System.Int32 Id_Task, System.Int32 Id_Task_Parent, System.Int32 Id_Project, System.String Title, System.Decimal Initial_Cost, System.DateTime Start, System.DateTime End, System.Decimal Final_Cost, System.DateTime Final_End, System.Decimal Percent_Complete, System.Boolean Expanded, System.Boolean Summary, System.Int32 Alert_Days_From_End, System.Int32 Order, System.Byte Id_Status, System.Boolean Replaced_Cost, System.String Description, System.Boolean EmailAlert, System.String PROJECTString, System.String STATUSString){
            Entities.TASK entity = Instance().GetOne(Id_Task);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_Task", Id_Task));

            entity.Id_Task_Parent = Id_Task_Parent;
            entity.Id_Project = Id_Project;
            entity.Title = Title;
            entity.Initial_Cost = Initial_Cost;
            entity.Start = Start;
            entity.End = End;
            entity.Final_Cost = Final_Cost;
            entity.Final_End = Final_End;
            entity.Percent_Complete = Percent_Complete;
            entity.Expanded = Expanded;
            entity.Summary = Summary;
            entity.Alert_Days_From_End = Alert_Days_From_End;
            entity.Order = Order;
            entity.Id_Status = Id_Status;
            entity.Replaced_Cost = Replaced_Cost;
            entity.Description = Description;
            entity.EmailAlert = EmailAlert;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert TASK
        /// </summary>
        public void Insert(System.Int32 Id_Task_Parent, System.Int32 Id_Project, System.String Title, System.Decimal Initial_Cost, System.DateTime Start, System.DateTime End, System.Decimal Final_Cost, System.DateTime Final_End, System.Decimal Percent_Complete, System.Boolean Expanded, System.Boolean Summary, System.Int32 Alert_Days_From_End, System.Int32 Order, System.Byte Id_Status, System.Boolean Replaced_Cost, System.String Description, System.Boolean EmailAlert){
            Entities.TASK entity = new Entities.TASK();

            entity.Id_Task_Parent = Id_Task_Parent;
            entity.Id_Project = Id_Project;
            entity.Title = Title;
            entity.Initial_Cost = Initial_Cost;
            entity.Start = Start;
            entity.End = End;
            entity.Final_Cost = Final_Cost;
            entity.Final_End = Final_End;
            entity.Percent_Complete = Percent_Complete;
            entity.Expanded = Expanded;
            entity.Summary = Summary;
            entity.Alert_Days_From_End = Alert_Days_From_End;
            entity.Order = Order;
            entity.Id_Status = Id_Status;
            entity.Replaced_Cost = Replaced_Cost;
            entity.Description = Description;
            entity.EmailAlert = EmailAlert;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public TASKList GetAllByProject(System.Int32 Id_Project) {
            
                return Instance().GetAllByProject( Id_Project);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateOwner(System.Int32 Id_Task, System.String Description, System.Decimal Initial_Cost, System.Int32 Alert_Days_From_End, System.Boolean EmailAlert, System.Byte Id_Status) {
            
                return Instance().PartialUpdateOwner( Id_Task, Description, Initial_Cost, Alert_Days_From_End, EmailAlert, Id_Status);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte Id_Status) {
            
                return Instance().ChangeStatus( Id_Task, Id_Status);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateCollaborator(System.Int32 Id_Task, System.Decimal Final_Cost, System.DateTime Final_End, System.Decimal Percent_Complete, System.Byte Id_Status) {
            
                return Instance().PartialUpdateCollaborator( Id_Task, Final_Cost, Final_End, Percent_Complete, Id_Status);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 UpdatePercentComplete(System.Int32 Id_User) {
            
                return Instance().UpdatePercentComplete( Id_User);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetAllByUser(System.Int32 Id_User) {
            
                return Instance().GetAllByUser( Id_User);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ReplaceCost(System.Int32 Id_Task) {
            
                return Instance().ReplaceCost( Id_Task);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetTaskAlerts() {
            
                return Instance().GetTaskAlerts();
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class TASKLoader<T> : BaseLoader< T, TASK, ObjectList<T>>, IGenericGateway where T : TASK, new()
    {

        #region "Singleton"

        static TASKLoader<T> _instance;

        private TASKLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static TASKLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TASKLoader<T>();
                else {
                    TASKLoader<T> inst = HttpContext.Current.Items["SISMONRules.TASKLoaderSingleton"] as TASKLoader<T>;
                    if (inst == null) {
                        inst = new TASKLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.TASKLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Task"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(TASK);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "TASK"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, TASK entity)
        {
            
            IMappeableTASKObject TASK = (IMappeableTASKObject)entity;
            TASK.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? new System.Nullable<System.Int32>() : reader.GetInt32(1),
reader.GetInt32(2),
reader.GetString(3),
(reader.IsDBNull(4)) ? new System.Nullable<System.Decimal>() : reader.GetDecimal(4),
reader.GetDateTime(5),
reader.GetDateTime(6),
(reader.IsDBNull(7)) ? new System.Nullable<System.Decimal>() : reader.GetDecimal(7),
(reader.IsDBNull(8)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(8),
reader.GetDecimal(9),
(reader.IsDBNull(10)) ? new System.Nullable<System.Boolean>() : reader.GetBoolean(10),
reader.GetBoolean(11),
(reader.IsDBNull(12)) ? new System.Nullable<System.Int32>() : reader.GetInt32(12),
reader.GetInt32(13),
reader.GetByte(14),
reader.GetBoolean(15),
(reader.IsDBNull(16)) ? "" : reader.GetString(16),
reader.GetBoolean(17),
(reader.IsDBNull(18)) ? "" : reader.GetString(18),
(reader.IsDBNull(19)) ? "" : reader.GetString(19));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.RESOURCEList RESOURCECollection = null; // Lazy load
Entities.TASK_CONFIGURATIONList TASK_CONFIGURATIONCollection = null; // Lazy load
Objects.PROJECTObject PROJECTEntity = null; // Lazy load
Objects.STATUSObject STATUSEntity = null; // Lazy load
Objects.TASKObject TASKEntity = null; // Lazy load
            ((IMappeableTASK)entity).CompleteEntity(RESOURCECollection, TASK_CONFIGURATIONCollection, PROJECTEntity, STATUSEntity, TASKEntity);
        }


        



        /// <summary>
        /// Get a TASK by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TASKList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Task)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetOne", Id_Task);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, System.Int32 Id_Task_Parent)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByTASK", Id_Task_Parent);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByTASK", TASK.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(System.Int32 Id_Task_Parent)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByTASK", Id_Task_Parent);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByTASK", TASK.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetAllByProject(System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetAllByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetAllByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetAllByProject" , Id_Project);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateOwner(System.Int32 Id_Task, System.String Description, System.Decimal Initial_Cost, System.Int32 Alert_Days_From_End, System.Boolean EmailAlert, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_PartialUpdateOwner" , Id_Task, Description, Initial_Cost, Alert_Days_From_End, EmailAlert, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateOwner(DbTransaction transaction , System.Int32 Id_Task, System.String Description, System.Decimal Initial_Cost, System.Int32 Alert_Days_From_End, System.Boolean EmailAlert, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_PartialUpdateOwner" , Id_Task, Description, Initial_Cost, Alert_Days_From_End, EmailAlert, Id_Status);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_ChangeStatus" , Id_Task, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(DbTransaction transaction , System.Int32 Id_Task, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_ChangeStatus" , Id_Task, Id_Status);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateCollaborator(System.Int32 Id_Task, System.Decimal Final_Cost, System.DateTime Final_End, System.Decimal Percent_Complete, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_PartialUpdateCollaborator" , Id_Task, Final_Cost, Final_End, Percent_Complete, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateCollaborator(DbTransaction transaction , System.Int32 Id_Task, System.Decimal Final_Cost, System.DateTime Final_End, System.Decimal Percent_Complete, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_PartialUpdateCollaborator" , Id_Task, Final_Cost, Final_End, Percent_Complete, Id_Status);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 UpdatePercentComplete(System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_UpdatePercentComplete" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 UpdatePercentComplete(DbTransaction transaction , System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_UpdatePercentComplete" , Id_User);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetAllByUser(System.Int32 Id_User) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(StoredProceduresPrefix() + "TASK_GetAllByUser" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetAllByUser(DbTransaction transaction , System.Int32 Id_User) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetAllByUser" , Id_User);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ReplaceCost(System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_ReplaceCost" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ReplaceCost(DbTransaction transaction , System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_ReplaceCost" , Id_Task);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetTaskAlerts() {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(StoredProceduresPrefix() + "TASK_GetTaskAlerts" );
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetTaskAlerts(DbTransaction transaction ) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetTaskAlerts" );
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





