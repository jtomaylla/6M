
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is TASK_HISTORYMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class TASK_HISTORYMapper : BaseGateway<TASK_HISTORY, TASK_HISTORYList>, IGenericGateway
    {


        #region "Singleton"

        static TASK_HISTORYMapper _instance;

        private TASK_HISTORYMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static TASK_HISTORYMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TASK_HISTORYMapper();
                else {
                    TASK_HISTORYMapper inst = HttpContext.Current.Items["SISMONRules.TASK_HISTORYMapperSingleton"] as TASK_HISTORYMapper;
                    if (inst == null) {
                        inst = new TASK_HISTORYMapper();
                        HttpContext.Current.Items.Add("SISMONRules.TASK_HISTORYMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Task_History"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(TASK_HISTORY);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "TASK_HISTORY"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(TASK_HISTORYMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, TASK_HISTORY entity)
        {
            
            IMappeableTASK_HISTORYObject TASK_HISTORY = (IMappeableTASK_HISTORYObject)entity;
            TASK_HISTORY.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
reader.GetDateTime(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(TASK_HISTORY entity)
        {

            IMappeableTASK_HISTORYObject TASK_HISTORY = (IMappeableTASK_HISTORYObject)entity;
            return TASK_HISTORY.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(TASK_HISTORY entity)
        {

            IMappeableTASK_HISTORYObject TASK_HISTORY = (IMappeableTASK_HISTORYObject)entity;
            return TASK_HISTORY.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(TASK_HISTORY entity)
        {

            IMappeableTASK_HISTORYObject TASK_HISTORY = (IMappeableTASK_HISTORYObject)entity;
            return TASK_HISTORY.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(TASK_HISTORY entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableTASK_HISTORYObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(TASK_HISTORY entity)
        {
            Objects.TASKObject TASKEntity = null; // Lazy load
            ((IMappeableTASK_HISTORY)entity).CompleteEntity(TASKEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a TASK_HISTORY by execute a SQL Query Text
        /// </summary>
        public TASK_HISTORY GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TASK_HISTORYList by execute a SQL Query Text
        /// </summary>
        public TASK_HISTORYList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public TASK_HISTORY GetOne(System.Int32 Id_Task_History)
        {
            return base.GetOne(new TASK_HISTORY(Id_Task_History));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public TASK_HISTORYList GetByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_HISTORY_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASK_HISTORYList GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_HISTORY_GetByTASK", TASK.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public TASK_HISTORYList GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_HISTORY_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASK_HISTORYList GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_HISTORY_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Task_History)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_HISTORY_Delete", Id_Task_History);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Task_History)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_HISTORY_Delete", Id_Task_History);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_HISTORY_DeleteByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_HISTORY_DeleteByTASK", Id_Task);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_HISTORY_DeleteByTASK", TASK.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_HISTORY_DeleteByTASK", TASK.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class TASK_HISTORYMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.TASK_HISTORYMapper Instance()
        {
            return SISMONRules.Mappers.TASK_HISTORYMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a TASK_HISTORYEntity by calling a Stored Procedure
        /// </summary>
        public Entities.TASK_HISTORY GetOne(System.Int32 Id_Task_History) {
            return Instance().GetOne( Id_Task_History);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a TASK_HISTORYList by calling a Stored Procedure
        /// </summary>
        public Entities.TASK_HISTORYList GetByTASK(System.Int32 Id_Task)
        {
            return Instance().GetByTASK(Id_Task);
        }

        /// <summary>
        /// Get a TASK_HISTORYList by calling a Stored Procedure
        /// </summary>
        public Entities.TASK_HISTORYList GetByTASK(IUniqueIdentifiable TASK)
        {
            return Instance().GetByTASK(TASK);
        }

    

       

        /// <summary>
        /// Delete children for TASK_HISTORY
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, TASK_HISTORY entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete TASK_HISTORY by TASK
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            Instance().DeleteByTASK(Id_Task);
        }

        /// <summary>
        /// Delete TASK_HISTORY by TASK
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            Instance().DeleteByTASK(TASK);
        }

    
        /// <summary>
        /// Delete TASK_HISTORY 
        /// </summary>
        public void Delete(System.Int32 Id_Task_History){
            Instance().Delete(Id_Task_History);
        }

        /// <summary>
        /// Delete TASK_HISTORY 
        /// </summary>
        public void Delete(Entities.TASK_HISTORY entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save TASK_HISTORY  
        /// </summary>
        public void Save(Entities.TASK_HISTORY entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert TASK_HISTORY 
        /// </summary>
        public void Insert(Entities.TASK_HISTORY entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll TASK_HISTORY 
        /// </summary>
        public Entities.TASK_HISTORYList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save TASK_HISTORY 
        /// </summary>
        public void Save(System.Int32 Id_Task_History, System.Int32 Id_Task, System.String Change_Reason, System.DateTime Change_Date){
            Entities.TASK_HISTORY entity = Instance().GetOne(Id_Task_History);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_Task_History", Id_Task_History));

            entity.Id_Task = Id_Task;
            entity.Change_Reason = Change_Reason;
            entity.Change_Date = Change_Date;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert TASK_HISTORY
        /// </summary>
        public void Insert(System.Int32 Id_Task, System.String Change_Reason, System.DateTime Change_Date){
            Entities.TASK_HISTORY entity = new Entities.TASK_HISTORY();

            entity.Id_Task = Id_Task;
            entity.Change_Reason = Change_Reason;
            entity.Change_Date = Change_Date;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class TASK_HISTORYLoader<T> : BaseLoader< T, TASK_HISTORY, ObjectList<T>>, IGenericGateway where T : TASK_HISTORY, new()
    {

        #region "Singleton"

        static TASK_HISTORYLoader<T> _instance;

        private TASK_HISTORYLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static TASK_HISTORYLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TASK_HISTORYLoader<T>();
                else {
                    TASK_HISTORYLoader<T> inst = HttpContext.Current.Items["SISMONRules.TASK_HISTORYLoaderSingleton"] as TASK_HISTORYLoader<T>;
                    if (inst == null) {
                        inst = new TASK_HISTORYLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.TASK_HISTORYLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Task_History"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(TASK_HISTORY);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "TASK_HISTORY"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, TASK_HISTORY entity)
        {
            
            IMappeableTASK_HISTORYObject TASK_HISTORY = (IMappeableTASK_HISTORYObject)entity;
            TASK_HISTORY.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
reader.GetDateTime(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.TASKObject TASKEntity = null; // Lazy load
            ((IMappeableTASK_HISTORY)entity).CompleteEntity(TASKEntity);
        }


        



        /// <summary>
        /// Get a TASK_HISTORY by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TASK_HISTORYList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Task_History)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_HISTORY_GetOne", Id_Task_History);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_HISTORY_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_HISTORY_GetByTASK", TASK.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_HISTORY_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_HISTORY_GetByTASK", TASK.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





