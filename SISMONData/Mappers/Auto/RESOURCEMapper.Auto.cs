
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is RESOURCEMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class RESOURCEMapper : BaseGateway<RESOURCE, RESOURCEList>, IGenericGateway
    {


        #region "Singleton"

        static RESOURCEMapper _instance;

        private RESOURCEMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static RESOURCEMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new RESOURCEMapper();
                else {
                    RESOURCEMapper inst = HttpContext.Current.Items["SISMONRules.RESOURCEMapperSingleton"] as RESOURCEMapper;
                    if (inst == null) {
                        inst = new RESOURCEMapper();
                        HttpContext.Current.Items.Add("SISMONRules.RESOURCEMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Resource"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(RESOURCE);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "RESOURCE"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(RESOURCEMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, RESOURCE entity)
        {
            
            IMappeableRESOURCEObject RESOURCE = (IMappeableRESOURCEObject)entity;
            RESOURCE.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetByte(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(RESOURCE entity)
        {

            IMappeableRESOURCEObject RESOURCE = (IMappeableRESOURCEObject)entity;
            return RESOURCE.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(RESOURCE entity)
        {

            IMappeableRESOURCEObject RESOURCE = (IMappeableRESOURCEObject)entity;
            return RESOURCE.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(RESOURCE entity)
        {

            IMappeableRESOURCEObject RESOURCE = (IMappeableRESOURCEObject)entity;
            return RESOURCE.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(RESOURCE entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableRESOURCEObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(RESOURCE entity)
        {
            Objects.TASKObject TASKEntity = null; // Lazy load
Objects.USERObject USEREntity = null; // Lazy load
            ((IMappeableRESOURCE)entity).CompleteEntity(TASKEntity, USEREntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a RESOURCE by execute a SQL Query Text
        /// </summary>
        public RESOURCE GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a RESOURCEList by execute a SQL Query Text
        /// </summary>
        public RESOURCEList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public RESOURCE GetOne(System.Int32 Id_Resource)
        {
            return base.GetOne(new RESOURCE(Id_Resource));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByUSER", USER.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetByUSER(System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetByUSER(IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByUSER", USER.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Resource)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_Delete", Id_Resource);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Resource)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_Delete", Id_Resource);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByTASK", Id_Task);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByTASK", TASK.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByTASK", TASK.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByUSER", Id_User);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByUSER", USER.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByUSER", USER.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByTask" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(DbTransaction transaction , System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByTask" , Id_Task);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetAllByTask(System.Int32 Id_Task) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetAllByTask" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetAllByTask(DbTransaction transaction , System.Int32 Id_Task) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetAllByTask" , Id_Task);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public RESOURCE GetOne(System.Int32 Id_Task, System.Int32 Id_User) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetOne" , Id_Task, Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public RESOURCE GetOne(DbTransaction transaction , System.Int32 Id_Task, System.Int32 Id_User) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetOne" , Id_Task, Id_User);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_ChangeStatus" , Id_Task, ID_STATUS);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(DbTransaction transaction , System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_ChangeStatus" , Id_Task, ID_STATUS);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class RESOURCEMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.RESOURCEMapper Instance()
        {
            return SISMONRules.Mappers.RESOURCEMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a RESOURCEEntity by calling a Stored Procedure
        /// </summary>
        public Entities.RESOURCE GetOne(System.Int32 Id_Resource) {
            return Instance().GetOne( Id_Resource);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a RESOURCEList by calling a Stored Procedure
        /// </summary>
        public Entities.RESOURCEList GetByTASK(System.Int32 Id_Task)
        {
            return Instance().GetByTASK(Id_Task);
        }

        /// <summary>
        /// Get a RESOURCEList by calling a Stored Procedure
        /// </summary>
        public Entities.RESOURCEList GetByTASK(IUniqueIdentifiable TASK)
        {
            return Instance().GetByTASK(TASK);
        }

    

        /// <summary>
        /// Get a RESOURCEList by calling a Stored Procedure
        /// </summary>
        public Entities.RESOURCEList GetByUSER(System.Int32 Id_User)
        {
            return Instance().GetByUSER(Id_User);
        }

        /// <summary>
        /// Get a RESOURCEList by calling a Stored Procedure
        /// </summary>
        public Entities.RESOURCEList GetByUSER(IUniqueIdentifiable USER)
        {
            return Instance().GetByUSER(USER);
        }

    

       

        /// <summary>
        /// Delete children for RESOURCE
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, RESOURCE entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete RESOURCE by TASK
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            Instance().DeleteByTASK(Id_Task);
        }

        /// <summary>
        /// Delete RESOURCE by TASK
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            Instance().DeleteByTASK(TASK);
        }

    

        /// <summary>
        /// Delete RESOURCE by USER
        /// </summary>
        public void DeleteByUSER(System.Int32 Id_User)
        {
            Instance().DeleteByUSER(Id_User);
        }

        /// <summary>
        /// Delete RESOURCE by USER
        /// </summary>
        public void DeleteByUSER(IUniqueIdentifiable USER)
        {
            Instance().DeleteByUSER(USER);
        }

    
        /// <summary>
        /// Delete RESOURCE 
        /// </summary>
        public void Delete(System.Int32 Id_Resource){
            Instance().Delete(Id_Resource);
        }

        /// <summary>
        /// Delete RESOURCE 
        /// </summary>
        public void Delete(Entities.RESOURCE entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save RESOURCE  
        /// </summary>
        public void Save(Entities.RESOURCE entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert RESOURCE 
        /// </summary>
        public void Insert(Entities.RESOURCE entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll RESOURCE 
        /// </summary>
        public Entities.RESOURCEList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save RESOURCE 
        /// </summary>
        public void Save(System.Int32 Id_Resource, System.Int32 Id_Task, System.Int32 Id_User, System.Byte Id_Status, System.String USERString){
            Entities.RESOURCE entity = Instance().GetOne(Id_Resource);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_Resource", Id_Resource));

            entity.Id_Task = Id_Task;
            entity.Id_User = Id_User;
            entity.Id_Status = Id_Status;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert RESOURCE
        /// </summary>
        public void Insert(System.Int32 Id_Task, System.Int32 Id_User, System.Byte Id_Status){
            Entities.RESOURCE entity = new Entities.RESOURCE();

            entity.Id_Task = Id_Task;
            entity.Id_User = Id_User;
            entity.Id_Status = Id_Status;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(System.Int32 Id_Task) {
            
                return Instance().DeleteByTask( Id_Task);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public RESOURCEList GetAllByTask(System.Int32 Id_Task) {
            
                return Instance().GetAllByTask( Id_Task);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public RESOURCE GetOne(System.Int32 Id_Task, System.Int32 Id_User) {
            
                return Instance().GetOne( Id_Task, Id_User);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte ID_STATUS) {
            
                return Instance().ChangeStatus( Id_Task, ID_STATUS);
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class RESOURCELoader<T> : BaseLoader< T, RESOURCE, ObjectList<T>>, IGenericGateway where T : RESOURCE, new()
    {

        #region "Singleton"

        static RESOURCELoader<T> _instance;

        private RESOURCELoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static RESOURCELoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new RESOURCELoader<T>();
                else {
                    RESOURCELoader<T> inst = HttpContext.Current.Items["SISMONRules.RESOURCELoaderSingleton"] as RESOURCELoader<T>;
                    if (inst == null) {
                        inst = new RESOURCELoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.RESOURCELoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Resource"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(RESOURCE);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "RESOURCE"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, RESOURCE entity)
        {
            
            IMappeableRESOURCEObject RESOURCE = (IMappeableRESOURCEObject)entity;
            RESOURCE.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetByte(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.TASKObject TASKEntity = null; // Lazy load
Objects.USERObject USEREntity = null; // Lazy load
            ((IMappeableRESOURCE)entity).CompleteEntity(TASKEntity, USEREntity);
        }


        



        /// <summary>
        /// Get a RESOURCE by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a RESOURCEList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Resource)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetOne", Id_Resource);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByUSER", USER.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByUSER", USER.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByTask" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(DbTransaction transaction , System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByTask" , Id_Task);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetAllByTask(System.Int32 Id_Task) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetAllByTask" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetAllByTask(DbTransaction transaction , System.Int32 Id_Task) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetAllByTask" , Id_Task);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public T GetOne(System.Int32 Id_Task, System.Int32 Id_User) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetOne" , Id_Task, Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public T GetOne(DbTransaction transaction , System.Int32 Id_Task, System.Int32 Id_User) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetOne" , Id_Task, Id_User);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_ChangeStatus" , Id_Task, ID_STATUS);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(DbTransaction transaction , System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_ChangeStatus" , Id_Task, ID_STATUS);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





