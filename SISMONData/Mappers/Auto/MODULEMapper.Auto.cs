
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is MODULEMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class MODULEMapper : BaseGateway<MODULE, MODULEList>, IGenericGateway
    {


        #region "Singleton"

        static MODULEMapper _instance;

        private MODULEMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static MODULEMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new MODULEMapper();
                else {
                    MODULEMapper inst = HttpContext.Current.Items["SISMONRules.MODULEMapperSingleton"] as MODULEMapper;
                    if (inst == null) {
                        inst = new MODULEMapper();
                        HttpContext.Current.Items.Add("SISMONRules.MODULEMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Module"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(MODULE);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "MODULE"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(MODULEMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, MODULE entity)
        {
            
            IMappeableMODULEObject MODULE = (IMappeableMODULEObject)entity;
            MODULE.HydrateFields(
            reader.GetByte(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1),
reader.GetString(2),
reader.GetString(3),
reader.GetString(4),
reader.GetByte(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(MODULE entity)
        {

            IMappeableMODULEObject MODULE = (IMappeableMODULEObject)entity;
            return MODULE.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(MODULE entity)
        {

            IMappeableMODULEObject MODULE = (IMappeableMODULEObject)entity;
            return MODULE.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(MODULE entity)
        {

            IMappeableMODULEObject MODULE = (IMappeableMODULEObject)entity;
            return MODULE.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(MODULE entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableMODULEObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(MODULE entity)
        {
            Objects.STATUSObject STATUSEntity = null; // Lazy load
            ((IMappeableMODULE)entity).CompleteEntity(STATUSEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a MODULE by execute a SQL Query Text
        /// </summary>
        public MODULE GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a MODULEList by execute a SQL Query Text
        /// </summary>
        public MODULEList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public MODULE GetOne(System.Byte Id_Module)
        {
            return base.GetOne(new MODULE(Id_Module));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public MODULEList GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "MODULE_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public MODULEList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "MODULE_GetBySTATUS", STATUS.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public MODULEList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "MODULE_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public MODULEList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "MODULE_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Byte Id_Module)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "MODULE_Delete", Id_Module);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Byte Id_Module)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "MODULE_Delete", Id_Module);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "MODULE_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "MODULE_DeleteBySTATUS", Id_Status);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "MODULE_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "MODULE_DeleteBySTATUS", STATUS.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public MODULEList GetByStatus(System.Int32 status) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "MODULE_GetByStatus" , status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public MODULEList GetByStatus(DbTransaction transaction , System.Int32 status) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "MODULE_GetByStatus" , status);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class MODULEMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.MODULEMapper Instance()
        {
            return SISMONRules.Mappers.MODULEMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a MODULEEntity by calling a Stored Procedure
        /// </summary>
        public Entities.MODULE GetOne(System.Byte Id_Module) {
            return Instance().GetOne( Id_Module);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a MODULEList by calling a Stored Procedure
        /// </summary>
        public Entities.MODULEList GetBySTATUS(System.Byte Id_Status)
        {
            return Instance().GetBySTATUS(Id_Status);
        }

        /// <summary>
        /// Get a MODULEList by calling a Stored Procedure
        /// </summary>
        public Entities.MODULEList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return Instance().GetBySTATUS(STATUS);
        }

    

       

        /// <summary>
        /// Delete children for MODULE
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, MODULE entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete MODULE by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            Instance().DeleteBySTATUS(Id_Status);
        }

        /// <summary>
        /// Delete MODULE by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            Instance().DeleteBySTATUS(STATUS);
        }

    
        /// <summary>
        /// Delete MODULE 
        /// </summary>
        public void Delete(System.Byte Id_Module){
            Instance().Delete(Id_Module);
        }

        /// <summary>
        /// Delete MODULE 
        /// </summary>
        public void Delete(Entities.MODULE entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save MODULE  
        /// </summary>
        public void Save(Entities.MODULE entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert MODULE 
        /// </summary>
        public void Insert(Entities.MODULE entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll MODULE 
        /// </summary>
        public Entities.MODULEList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save MODULE 
        /// </summary>
        public void Save(System.Byte Id_Module, System.String Name, System.String Description, System.String URL, System.String Domain, System.Byte Id_Status, System.String STATUSString){
            Entities.MODULE entity = Instance().GetOne(Id_Module);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_Module", Id_Module));

            entity.Name = Name;
            entity.Description = Description;
            entity.URL = URL;
            entity.Domain = Domain;
            entity.Id_Status = Id_Status;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert MODULE
        /// </summary>
        public void Insert(System.String Name, System.String Description, System.String URL, System.String Domain, System.Byte Id_Status){
            Entities.MODULE entity = new Entities.MODULE();

            entity.Name = Name;
            entity.Description = Description;
            entity.URL = URL;
            entity.Domain = Domain;
            entity.Id_Status = Id_Status;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public MODULEList GetByStatus(System.Int32 status) {
            
                return Instance().GetByStatus( status);
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class MODULELoader<T> : BaseLoader< T, MODULE, ObjectList<T>>, IGenericGateway where T : MODULE, new()
    {

        #region "Singleton"

        static MODULELoader<T> _instance;

        private MODULELoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static MODULELoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new MODULELoader<T>();
                else {
                    MODULELoader<T> inst = HttpContext.Current.Items["SISMONRules.MODULELoaderSingleton"] as MODULELoader<T>;
                    if (inst == null) {
                        inst = new MODULELoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.MODULELoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Module"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(MODULE);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "MODULE"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, MODULE entity)
        {
            
            IMappeableMODULEObject MODULE = (IMappeableMODULEObject)entity;
            MODULE.HydrateFields(
            reader.GetByte(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1),
reader.GetString(2),
reader.GetString(3),
reader.GetString(4),
reader.GetByte(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.STATUSObject STATUSEntity = null; // Lazy load
            ((IMappeableMODULE)entity).CompleteEntity(STATUSEntity);
        }


        



        /// <summary>
        /// Get a MODULE by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a MODULEList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Byte Id_Module)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "MODULE_GetOne", Id_Module);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "MODULE_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "MODULE_GetBySTATUS", STATUS.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "MODULE_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "MODULE_GetBySTATUS", STATUS.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByStatus(System.Int32 status) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "MODULE_GetByStatus" , status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByStatus(DbTransaction transaction , System.Int32 status) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "MODULE_GetByStatus" , status);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





