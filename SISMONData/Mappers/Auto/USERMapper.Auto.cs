
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is USERMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class USERMapper : BaseGateway<USER, USERList>, IGenericGateway
    {


        #region "Singleton"

        static USERMapper _instance;

        private USERMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static USERMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new USERMapper();
                else {
                    USERMapper inst = HttpContext.Current.Items["SISMONRules.USERMapperSingleton"] as USERMapper;
                    if (inst == null) {
                        inst = new USERMapper();
                        HttpContext.Current.Items.Add("SISMONRules.USERMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_User"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(USER);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "USER"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(USERMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, USER entity)
        {
            System.Byte[] _PasswordHash = new System.Byte[256]; if (!reader.IsDBNull(6)) _PasswordHash = reader.GetValue(6) as System.Byte[];

            IMappeableUSERObject USER = (IMappeableUSERObject)entity;
            USER.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
reader.GetString(3),
reader.GetString(4),
reader.GetString(5),
_PasswordHash,
reader.GetBoolean(7),
reader.GetInt32(8),
reader.GetString(9),
reader.GetByte(10),
(reader.IsDBNull(11)) ? "" : reader.GetString(11));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(USER entity)
        {

            IMappeableUSERObject USER = (IMappeableUSERObject)entity;
            return USER.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(USER entity)
        {

            IMappeableUSERObject USER = (IMappeableUSERObject)entity;
            return USER.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(USER entity)
        {

            IMappeableUSERObject USER = (IMappeableUSERObject)entity;
            return USER.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(USER entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableUSERObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(USER entity)
        {
            Entities.USER_PROFILEList USER_PROFILECollection = null; // Lazy load
Objects.ORGANIZATIONObject ORGANIZATIONEntity = null; // Lazy load
Objects.STATUSObject STATUSEntity = null; // Lazy load
            ((IMappeableUSER)entity).CompleteEntity(USER_PROFILECollection, ORGANIZATIONEntity, STATUSEntity);
        }


        # region CRUD Operations
        
        /// <summary>
        /// 
        /// </summary>
        public override void Insert(USER entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Insert(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Insert(DbTransaction transaction, USER entity)
        {
            base.Insert(transaction, entity);
            ((IMappeableUSER)entity).SetFKValuesForChilds(entity);
            
            if (!((IMappeableUSER)entity).IsUSER_PROFILECollectionNull()) {
                
                Mappers.USER_PROFILEMapper.Instance().Append(transaction, entity.USER_PROFILECollection);
            }
                        
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Delete(USER entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Delete(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public override void Delete(DbTransaction transaction, USER entity)
        {
            DeleteChildren(transaction, entity);
            base.Delete(transaction, entity);
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Save(USER entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Save(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Save(DbTransaction transaction, USER entity)
        {
            base.Save(transaction, entity);
            ((IMappeableUSER)entity).SetFKValuesForChilds(entity);
            
            if (!((IMappeableUSER)entity).IsUSER_PROFILECollectionNull()) {
                
                
                Mappers.USER_PROFILEMapper.Instance().Update(transaction, entity.USER_PROFILECollection);
                
            }
                        
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Update(USERList entityList)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Update(DbTransaction transaction, USERList entityList)
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {


                IObjectList<USER> deletedItems = ((IObjectList<USER>)entityList).DeletedItems();
                foreach (USER entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (USER entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<USER>)entityList).ResetDeletedItems();


                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(ObjectList<T> entityList)  where T : IObject, new()
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update<T>(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(DbTransaction transaction, ObjectList<T> entityList)   where T : IObject, new()
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {

                IObjectList<T> deletedItems = ((IObjectList<T>)entityList).DeletedItems();
                foreach (T entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity as USER);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (T entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity as USER);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity as USER);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity as USER);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<T>)entityList).ResetDeletedItems();

                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }


       

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
            
bool haveChild = false;                                                
                foreach (IUniqueIdentifiable child in Gateways.USER_PROFILEGateway.Instance().GetByUSER(transaction, entity))
                {
                    Mappers.USER_PROFILEMapper.Instance().DeleteChildren(transaction, child);
                    haveChild = true;
                }
                
                if (haveChild) 
                Mappers.USER_PROFILEMapper.Instance().DeleteByUSER(transaction, entity);
                        
        }


          





        /// <summary>
        /// Get a USER by execute a SQL Query Text
        /// </summary>
        public USER GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a USERList by execute a SQL Query Text
        /// </summary>
        public USERList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public USER GetOne(System.Int32 Id_User)
        {
            return base.GetOne(new USER(Id_User));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public USERList GetByORGANIZATION(DbTransaction transaction, System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public USERList GetByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public USERList GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public USERList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetBySTATUS", STATUS.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public USERList GetByORGANIZATION(System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public USERList GetByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public USERList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public USERList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_Delete", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_Delete", Id_User);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByORGANIZATION(System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_DeleteByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByORGANIZATION(DbTransaction transaction, System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_DeleteByORGANIZATION", Id_Organization);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_DeleteByORGANIZATION", ORGANIZATION.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_DeleteByORGANIZATION", ORGANIZATION.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_DeleteBySTATUS", Id_Status);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_DeleteBySTATUS", STATUS.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ValidUser(System.String UserName, System.String PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ValidUser" , UserName, PasswordHash);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ValidUser(DbTransaction transaction , System.String UserName, System.String PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ValidUser" , UserName, PasswordHash);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USER GetByEmail(System.String Email) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByEmail" , Email);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USER GetByEmail(DbTransaction transaction , System.String Email) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByEmail" , Email);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Boolean IsValidUser(System.String UserName, System.Byte[] PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_IsValidUser" , UserName, PasswordHash);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean IsValidUser(DbTransaction transaction , System.String UserName, System.Byte[] PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_IsValidUser" , UserName, PasswordHash);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangePassword(System.Int32 Id_User, System.Byte[] PasswordHash) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ChangePassword" , Id_User, PasswordHash);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangePassword(DbTransaction transaction , System.Int32 Id_User, System.Byte[] PasswordHash) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ChangePassword" , Id_User, PasswordHash);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USERList GetByProfile(System.Int32 Id_Profile) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByProfile" , Id_Profile);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USERList GetByProfile(DbTransaction transaction , System.Int32 Id_Profile) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByProfile" , Id_Profile);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistMail(System.Int32 Id_User, System.String Email, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ExistMail" , Id_User, Email, Operation);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistMail(DbTransaction transaction , System.Int32 Id_User, System.String Email, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ExistMail" , Id_User, Email, Operation);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USERList GetAllActiveUsers() {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetAllActiveUsers" );
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USERList GetAllActiveUsers(DbTransaction transaction ) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetAllActiveUsers" );
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USERList GetUsersByProject(System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetUsersByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USERList GetUsersByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetUsersByProject" , Id_Project);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USER GetByUserName(System.String UserName) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByUserName" , UserName);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USER GetByUserName(DbTransaction transaction , System.String UserName) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByUserName" , UserName);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistUserName(System.Int32 Id_User, System.String UserName, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ExistUserName" , Id_User, UserName, Operation);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistUserName(DbTransaction transaction , System.Int32 Id_User, System.String UserName, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ExistUserName" , Id_User, UserName, Operation);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class USERMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.USERMapper Instance()
        {
            return SISMONRules.Mappers.USERMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a USEREntity by calling a Stored Procedure
        /// </summary>
        public Entities.USER GetOne(System.Int32 Id_User) {
            return Instance().GetOne( Id_User);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a USERList by calling a Stored Procedure
        /// </summary>
        public Entities.USERList GetByORGANIZATION(System.Int32 Id_Organization)
        {
            return Instance().GetByORGANIZATION(Id_Organization);
        }

        /// <summary>
        /// Get a USERList by calling a Stored Procedure
        /// </summary>
        public Entities.USERList GetByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            return Instance().GetByORGANIZATION(ORGANIZATION);
        }

    

        /// <summary>
        /// Get a USERList by calling a Stored Procedure
        /// </summary>
        public Entities.USERList GetBySTATUS(System.Byte Id_Status)
        {
            return Instance().GetBySTATUS(Id_Status);
        }

        /// <summary>
        /// Get a USERList by calling a Stored Procedure
        /// </summary>
        public Entities.USERList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return Instance().GetBySTATUS(STATUS);
        }

    

       

        /// <summary>
        /// Delete children for USER
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, USER entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete USER by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(System.Int32 Id_Organization)
        {
            Instance().DeleteByORGANIZATION(Id_Organization);
        }

        /// <summary>
        /// Delete USER by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            Instance().DeleteByORGANIZATION(ORGANIZATION);
        }

    

        /// <summary>
        /// Delete USER by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            Instance().DeleteBySTATUS(Id_Status);
        }

        /// <summary>
        /// Delete USER by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            Instance().DeleteBySTATUS(STATUS);
        }

    
        /// <summary>
        /// Delete USER 
        /// </summary>
        public void Delete(System.Int32 Id_User){
            Instance().Delete(Id_User);
        }

        /// <summary>
        /// Delete USER 
        /// </summary>
        public void Delete(Entities.USER entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save USER  
        /// </summary>
        public void Save(Entities.USER entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert USER 
        /// </summary>
        public void Insert(Entities.USER entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll USER 
        /// </summary>
        public Entities.USERList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save USER 
        /// </summary>
        public void Save(System.Int32 Id_User, System.String First_Name, System.String Surname1, System.String Surname2, System.String Full_Name, System.String Email, System.Boolean Must_Change_Password, System.Int32 Id_Organization, System.String UserName, System.Byte Id_Status, System.String STATUSString){
            Entities.USER entity = Instance().GetOne(Id_User);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_User", Id_User));

            entity.First_Name = First_Name;
            entity.Surname1 = Surname1;
            entity.Surname2 = Surname2;
            entity.Full_Name = Full_Name;
            entity.Email = Email;
            entity.Must_Change_Password = Must_Change_Password;
            entity.Id_Organization = Id_Organization;
            entity.UserName = UserName;
            entity.Id_Status = Id_Status;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert USER
        /// </summary>
        public void Insert(System.String First_Name, System.String Surname1, System.String Surname2, System.String Full_Name, System.String Email, System.Boolean Must_Change_Password, System.Int32 Id_Organization, System.String UserName, System.Byte Id_Status){
            Entities.USER entity = new Entities.USER();

            entity.First_Name = First_Name;
            entity.Surname1 = Surname1;
            entity.Surname2 = Surname2;
            entity.Full_Name = Full_Name;
            entity.Email = Email;
            entity.Must_Change_Password = Must_Change_Password;
            entity.Id_Organization = Id_Organization;
            entity.UserName = UserName;
            entity.Id_Status = Id_Status;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ValidUser(System.String UserName, System.String PasswordHash) {
            
                return Instance().ValidUser( UserName, PasswordHash);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public USER GetByEmail(System.String Email) {
            
                return Instance().GetByEmail( Email);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean IsValidUser(System.String UserName, System.Byte[] PasswordHash) {
            
                return Instance().IsValidUser( UserName, PasswordHash);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangePassword(System.Int32 Id_User, System.Byte[] PasswordHash) {
            
                return Instance().ChangePassword( Id_User, PasswordHash);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public USERList GetByProfile(System.Int32 Id_Profile) {
            
                return Instance().GetByProfile( Id_Profile);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistMail(System.Int32 Id_User, System.String Email, System.String Operation) {
            
                return Instance().ExistMail( Id_User, Email, Operation);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public USERList GetAllActiveUsers() {
            
                return Instance().GetAllActiveUsers();
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public USERList GetUsersByProject(System.Int32 Id_Project) {
            
                return Instance().GetUsersByProject( Id_Project);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public USER GetByUserName(System.String UserName) {
            
                return Instance().GetByUserName( UserName);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistUserName(System.Int32 Id_User, System.String UserName, System.String Operation) {
            
                return Instance().ExistUserName( Id_User, UserName, Operation);
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class USERLoader<T> : BaseLoader< T, USER, ObjectList<T>>, IGenericGateway where T : USER, new()
    {

        #region "Singleton"

        static USERLoader<T> _instance;

        private USERLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static USERLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new USERLoader<T>();
                else {
                    USERLoader<T> inst = HttpContext.Current.Items["SISMONRules.USERLoaderSingleton"] as USERLoader<T>;
                    if (inst == null) {
                        inst = new USERLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.USERLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_User"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(USER);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "USER"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, USER entity)
        {
            System.Byte[] _PasswordHash = new System.Byte[256]; if (!reader.IsDBNull(6)) reader.GetBytes(6, 0, _PasswordHash, 0, 256);

            IMappeableUSERObject USER = (IMappeableUSERObject)entity;
            USER.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
reader.GetString(3),
reader.GetString(4),
reader.GetString(5),
_PasswordHash,
reader.GetBoolean(7),
reader.GetInt32(8),
reader.GetString(9),
reader.GetByte(10),
(reader.IsDBNull(11)) ? "" : reader.GetString(11));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.USER_PROFILEList USER_PROFILECollection = null; // Lazy load
Objects.ORGANIZATIONObject ORGANIZATIONEntity = null; // Lazy load
Objects.STATUSObject STATUSEntity = null; // Lazy load
            ((IMappeableUSER)entity).CompleteEntity(USER_PROFILECollection, ORGANIZATIONEntity, STATUSEntity);
        }


        



        /// <summary>
        /// Get a USER by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a USERList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_User)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetOne", Id_User);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByORGANIZATION(DbTransaction transaction, System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetBySTATUS", STATUS.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByORGANIZATION(System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetBySTATUS", STATUS.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ValidUser(System.String UserName, System.String PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ValidUser" , UserName, PasswordHash);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ValidUser(DbTransaction transaction , System.String UserName, System.String PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ValidUser" , UserName, PasswordHash);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public T GetByEmail(System.String Email) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByEmail" , Email);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public T GetByEmail(DbTransaction transaction , System.String Email) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByEmail" , Email);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean IsValidUser(System.String UserName, System.Byte[] PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_IsValidUser" , UserName, PasswordHash);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean IsValidUser(DbTransaction transaction , System.String UserName, System.Byte[] PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_IsValidUser" , UserName, PasswordHash);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangePassword(System.Int32 Id_User, System.Byte[] PasswordHash) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ChangePassword" , Id_User, PasswordHash);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangePassword(DbTransaction transaction , System.Int32 Id_User, System.Byte[] PasswordHash) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ChangePassword" , Id_User, PasswordHash);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByProfile(System.Int32 Id_Profile) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByProfile" , Id_Profile);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByProfile(DbTransaction transaction , System.Int32 Id_Profile) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByProfile" , Id_Profile);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistMail(System.Int32 Id_User, System.String Email, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ExistMail" , Id_User, Email, Operation);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistMail(DbTransaction transaction , System.Int32 Id_User, System.String Email, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ExistMail" , Id_User, Email, Operation);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetAllActiveUsers() {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetAllActiveUsers" );
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetAllActiveUsers(DbTransaction transaction ) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetAllActiveUsers" );
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetUsersByProject(System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetUsersByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetUsersByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetUsersByProject" , Id_Project);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public T GetByUserName(System.String UserName) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByUserName" , UserName);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public T GetByUserName(DbTransaction transaction , System.String UserName) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByUserName" , UserName);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistUserName(System.Int32 Id_User, System.String UserName, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ExistUserName" , Id_User, UserName, Operation);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistUserName(DbTransaction transaction , System.Int32 Id_User, System.String UserName, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ExistUserName" , Id_User, UserName, Operation);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





