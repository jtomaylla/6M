
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is PERMISSIONMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class PERMISSIONMapper : BaseGateway<PERMISSION, PERMISSIONList>, IGenericGateway
    {


        #region "Singleton"

        static PERMISSIONMapper _instance;

        private PERMISSIONMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PERMISSIONMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PERMISSIONMapper();
                else {
                    PERMISSIONMapper inst = HttpContext.Current.Items["SISMONRules.PERMISSIONMapperSingleton"] as PERMISSIONMapper;
                    if (inst == null) {
                        inst = new PERMISSIONMapper();
                        HttpContext.Current.Items.Add("SISMONRules.PERMISSIONMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Project","Id_User"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(PERMISSION);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "PERMISSION"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(PERMISSIONMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PERMISSION entity)
        {
            
            IMappeablePERMISSIONObject PERMISSION = (IMappeablePERMISSIONObject)entity;
            PERMISSION.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(PERMISSION entity)
        {

            IMappeablePERMISSIONObject PERMISSION = (IMappeablePERMISSIONObject)entity;
            return PERMISSION.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(PERMISSION entity)
        {

            IMappeablePERMISSIONObject PERMISSION = (IMappeablePERMISSIONObject)entity;
            return PERMISSION.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(PERMISSION entity)
        {

            IMappeablePERMISSIONObject PERMISSION = (IMappeablePERMISSIONObject)entity;
            return PERMISSION.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(PERMISSION entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeablePERMISSIONObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(PERMISSION entity)
        {
            
            ((IMappeablePERMISSION)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a PERMISSION by execute a SQL Query Text
        /// </summary>
        public PERMISSION GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PERMISSIONList by execute a SQL Query Text
        /// </summary>
        public PERMISSIONList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public PERMISSION GetOne(System.Int32 Id_Project, System.Int32 Id_User)
        {
            return base.GetOne(new PERMISSION(Id_Project, Id_User));
        }


        // GetOne By Objects and Params
                                    
        /// <summary>
        /// 
        /// </summary>
        public PERMISSION GetOne(IUniqueIdentifiable PROJECT, System.Int32 Id_User)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(PROJECT, Id_User));
        }   
                        


        

        /// <summary>
        /// 
        /// </summary>
        public PERMISSIONList GetByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public PERMISSIONList GetByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public PERMISSIONList GetByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public PERMISSIONList GetByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_GetByUSER", USER.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public PERMISSIONList GetByPROJECT(System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public PERMISSIONList GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public PERMISSIONList GetByUSER(System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public PERMISSIONList GetByUSER(IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetByUSER", USER.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Project, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PERMISSION_Delete", Id_Project, Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Project, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_Delete", Id_Project, Id_User);
        }


        // Delete By Objects and Params
                                    
        /// <summary>
        /// 
        /// </summary>
        public void Delete(IUniqueIdentifiable PROJECT, System.Int32 Id_User)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PERMISSION_Delete",  UniqueIdentifierHelper.ComposeIdentifier(PROJECT, Id_User));
        }   
        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, IUniqueIdentifiable PROJECT, System.Int32 Id_User)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_Delete",  UniqueIdentifierHelper.ComposeIdentifier(PROJECT, Id_User));
        }   
                        



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PERMISSION_DeleteByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_DeleteByPROJECT", Id_Project);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(IUniqueIdentifiable PROJECT)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PERMISSION_DeleteByPROJECT", PROJECT.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_DeleteByPROJECT", PROJECT.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PERMISSION_DeleteByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_DeleteByUSER", Id_User);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PERMISSION_DeleteByUSER", USER.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_DeleteByUSER", USER.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByProject(System.Int32 Id_Project) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "PERMISSION_DeleteByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_DeleteByProject" , Id_Project);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class PERMISSIONMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.PERMISSIONMapper Instance()
        {
            return SISMONRules.Mappers.PERMISSIONMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a PERMISSIONEntity by calling a Stored Procedure
        /// </summary>
        public Entities.PERMISSION GetOne(System.Int32 Id_Project, System.Int32 Id_User) {
            return Instance().GetOne( Id_Project, Id_User);
        }

        // GetBy Objects and Params
                                    
        /// <summary>
        /// Get a PERMISSION  by calling a Stored Procedure
        /// </summary>
        public Entities.PERMISSION GetOne(IUniqueIdentifiable PROJECT, System.Int32 Id_User)
        {
            return Instance().GetOne(PROJECT, Id_User);
        }   
                        

        

        /// <summary>
        /// Get a PERMISSIONList by calling a Stored Procedure
        /// </summary>
        public Entities.PERMISSIONList GetByPROJECT(System.Int32 Id_Project)
        {
            return Instance().GetByPROJECT(Id_Project);
        }

        /// <summary>
        /// Get a PERMISSIONList by calling a Stored Procedure
        /// </summary>
        public Entities.PERMISSIONList GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return Instance().GetByPROJECT(PROJECT);
        }

    

        /// <summary>
        /// Get a PERMISSIONList by calling a Stored Procedure
        /// </summary>
        public Entities.PERMISSIONList GetByUSER(System.Int32 Id_User)
        {
            return Instance().GetByUSER(Id_User);
        }

        /// <summary>
        /// Get a PERMISSIONList by calling a Stored Procedure
        /// </summary>
        public Entities.PERMISSIONList GetByUSER(IUniqueIdentifiable USER)
        {
            return Instance().GetByUSER(USER);
        }

    

       

        /// <summary>
        /// Delete children for PERMISSION
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, PERMISSION entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

                                    

        /// <summary>
        /// Delete PERMISSION
        /// </summary>
        public void Delete(IUniqueIdentifiable PROJECT, System.Int32 Id_User)
        {
            Instance().Delete(PROJECT, Id_User);
        }   
                        

        

        /// <summary>
        /// Delete PERMISSION by PROJECT
        /// </summary>
        public void DeleteByPROJECT(System.Int32 Id_Project)
        {
            Instance().DeleteByPROJECT(Id_Project);
        }

        /// <summary>
        /// Delete PERMISSION by PROJECT
        /// </summary>
        public void DeleteByPROJECT(IUniqueIdentifiable PROJECT)
        {
            Instance().DeleteByPROJECT(PROJECT);
        }

    

        /// <summary>
        /// Delete PERMISSION by USER
        /// </summary>
        public void DeleteByUSER(System.Int32 Id_User)
        {
            Instance().DeleteByUSER(Id_User);
        }

        /// <summary>
        /// Delete PERMISSION by USER
        /// </summary>
        public void DeleteByUSER(IUniqueIdentifiable USER)
        {
            Instance().DeleteByUSER(USER);
        }

    
        /// <summary>
        /// Delete PERMISSION 
        /// </summary>
        public void Delete(System.Int32 Id_Project, System.Int32 Id_User){
            Instance().Delete(Id_Project, Id_User);
        }

        /// <summary>
        /// Delete PERMISSION 
        /// </summary>
        public void Delete(Entities.PERMISSION entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save PERMISSION  
        /// </summary>
        public void Save(Entities.PERMISSION entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert PERMISSION 
        /// </summary>
        public void Insert(Entities.PERMISSION entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll PERMISSION 
        /// </summary>
        public Entities.PERMISSIONList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save PERMISSION 
        /// </summary>
        public void Save(System.Int32 Id_Project, System.Int32 Id_User, System.String PROJECTString, System.String USERString){
            Entities.PERMISSION entity = Instance().GetOne(Id_Project, Id_User);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}, {2} = {3}", "Id_Project", Id_Project, "Id_User", Id_User));

            Instance().Save(entity);
        }

        /// <summary>
        /// Insert PERMISSION
        /// </summary>
        public void Insert(System.Int32 Id_Project, System.Int32 Id_User){
            Entities.PERMISSION entity = new Entities.PERMISSION();

            entity.Id_Project = Id_Project;
            entity.Id_User = Id_User;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByProject(System.Int32 Id_Project) {
            
                return Instance().DeleteByProject( Id_Project);
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class PERMISSIONLoader<T> : BaseLoader< T, PERMISSION, ObjectList<T>>, IGenericGateway where T : PERMISSION, new()
    {

        #region "Singleton"

        static PERMISSIONLoader<T> _instance;

        private PERMISSIONLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PERMISSIONLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PERMISSIONLoader<T>();
                else {
                    PERMISSIONLoader<T> inst = HttpContext.Current.Items["SISMONRules.PERMISSIONLoaderSingleton"] as PERMISSIONLoader<T>;
                    if (inst == null) {
                        inst = new PERMISSIONLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.PERMISSIONLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Project","Id_User"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(PERMISSION);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "PERMISSION"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PERMISSION entity)
        {
            
            IMappeablePERMISSIONObject PERMISSION = (IMappeablePERMISSIONObject)entity;
            PERMISSION.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeablePERMISSION)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a PERMISSION by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PERMISSIONList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Project, System.Int32 Id_User)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetOne", Id_Project, Id_User);
        }


        // GetOne By Objects and Params
                                    
        /// <summary>
        /// 
        /// </summary>
        public T GetOne(IUniqueIdentifiable PROJECT, System.Int32 Id_User)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(PROJECT, Id_User));
        }   
                        


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_GetByUSER", USER.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetByUSER", Id_User);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUSER(IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PERMISSION_GetByUSER", USER.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByProject(System.Int32 Id_Project) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "PERMISSION_DeleteByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "PERMISSION_DeleteByProject" , Id_Project);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





