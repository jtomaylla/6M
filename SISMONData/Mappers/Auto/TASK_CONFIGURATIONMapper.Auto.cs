
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is TASK_CONFIGURATIONMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Entities;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace SISMONRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class TASK_CONFIGURATIONMapper : BaseGateway<TASK_CONFIGURATION, TASK_CONFIGURATIONList>, IGenericGateway
    {


        #region "Singleton"

        static TASK_CONFIGURATIONMapper _instance;

        private TASK_CONFIGURATIONMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static TASK_CONFIGURATIONMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TASK_CONFIGURATIONMapper();
                else {
                    TASK_CONFIGURATIONMapper inst = HttpContext.Current.Items["SISMONRules.TASK_CONFIGURATIONMapperSingleton"] as TASK_CONFIGURATIONMapper;
                    if (inst == null) {
                        inst = new TASK_CONFIGURATIONMapper();
                        HttpContext.Current.Items.Add("SISMONRules.TASK_CONFIGURATIONMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Task_Configuration"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(TASK_CONFIGURATION);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "TASK_CONFIGURATION"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(TASK_CONFIGURATIONMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, TASK_CONFIGURATION entity)
        {
            
            IMappeableTASK_CONFIGURATIONObject TASK_CONFIGURATION = (IMappeableTASK_CONFIGURATIONObject)entity;
            TASK_CONFIGURATION.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
reader.GetBoolean(3),
reader.GetByte(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(TASK_CONFIGURATION entity)
        {

            IMappeableTASK_CONFIGURATIONObject TASK_CONFIGURATION = (IMappeableTASK_CONFIGURATIONObject)entity;
            return TASK_CONFIGURATION.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(TASK_CONFIGURATION entity)
        {

            IMappeableTASK_CONFIGURATIONObject TASK_CONFIGURATION = (IMappeableTASK_CONFIGURATIONObject)entity;
            return TASK_CONFIGURATION.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(TASK_CONFIGURATION entity)
        {

            IMappeableTASK_CONFIGURATIONObject TASK_CONFIGURATION = (IMappeableTASK_CONFIGURATIONObject)entity;
            return TASK_CONFIGURATION.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(TASK_CONFIGURATION entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableTASK_CONFIGURATIONObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(TASK_CONFIGURATION entity)
        {
            Entities.TASK_ATTACHMENTList TASK_ATTACHMENTCollection = null; // Lazy load
Objects.TASKObject TASKEntity = null; // Lazy load
            ((IMappeableTASK_CONFIGURATION)entity).CompleteEntity(TASK_ATTACHMENTCollection, TASKEntity);
        }


        # region CRUD Operations
        
        /// <summary>
        /// 
        /// </summary>
        public override void Insert(TASK_CONFIGURATION entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Insert(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Insert(DbTransaction transaction, TASK_CONFIGURATION entity)
        {
            base.Insert(transaction, entity);
            ((IMappeableTASK_CONFIGURATION)entity).SetFKValuesForChilds(entity);
            
            if (!((IMappeableTASK_CONFIGURATION)entity).IsTASK_ATTACHMENTCollectionNull()) {
                
                Mappers.TASK_ATTACHMENTMapper.Instance().Append(transaction, entity.TASK_ATTACHMENTCollection);
            }
                        
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Delete(TASK_CONFIGURATION entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Delete(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public override void Delete(DbTransaction transaction, TASK_CONFIGURATION entity)
        {
            DeleteChildren(transaction, entity);
            base.Delete(transaction, entity);
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Save(TASK_CONFIGURATION entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Save(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Save(DbTransaction transaction, TASK_CONFIGURATION entity)
        {
            base.Save(transaction, entity);
            ((IMappeableTASK_CONFIGURATION)entity).SetFKValuesForChilds(entity);
            
            if (!((IMappeableTASK_CONFIGURATION)entity).IsTASK_ATTACHMENTCollectionNull()) {
                
                
                Mappers.TASK_ATTACHMENTMapper.Instance().Update(transaction, entity.TASK_ATTACHMENTCollection);
                
            }
                        
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Update(TASK_CONFIGURATIONList entityList)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Update(DbTransaction transaction, TASK_CONFIGURATIONList entityList)
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {


                IObjectList<TASK_CONFIGURATION> deletedItems = ((IObjectList<TASK_CONFIGURATION>)entityList).DeletedItems();
                foreach (TASK_CONFIGURATION entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (TASK_CONFIGURATION entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<TASK_CONFIGURATION>)entityList).ResetDeletedItems();


                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(ObjectList<T> entityList)  where T : IObject, new()
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update<T>(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(DbTransaction transaction, ObjectList<T> entityList)   where T : IObject, new()
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {

                IObjectList<T> deletedItems = ((IObjectList<T>)entityList).DeletedItems();
                foreach (T entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity as TASK_CONFIGURATION);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (T entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity as TASK_CONFIGURATION);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity as TASK_CONFIGURATION);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity as TASK_CONFIGURATION);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<T>)entityList).ResetDeletedItems();

                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }


       

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
            
bool haveChild = false;                                                
                foreach (IUniqueIdentifiable child in Gateways.TASK_ATTACHMENTGateway.Instance().GetByTASK_CONFIGURATION(transaction, entity))
                {
                    Mappers.TASK_ATTACHMENTMapper.Instance().DeleteChildren(transaction, child);
                    haveChild = true;
                }
                
                if (haveChild) 
                Mappers.TASK_ATTACHMENTMapper.Instance().DeleteByTASK_CONFIGURATION(transaction, entity);
                        
        }


          





        /// <summary>
        /// Get a TASK_CONFIGURATION by execute a SQL Query Text
        /// </summary>
        public TASK_CONFIGURATION GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TASK_CONFIGURATIONList by execute a SQL Query Text
        /// </summary>
        public TASK_CONFIGURATIONList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public TASK_CONFIGURATION GetOne(System.Int32 Id_Task_Configuration)
        {
            return base.GetOne(new TASK_CONFIGURATION(Id_Task_Configuration));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public TASK_CONFIGURATIONList GetByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASK_CONFIGURATIONList GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_GetByTASK", TASK.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public TASK_CONFIGURATIONList GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public TASK_CONFIGURATIONList GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Id_Task_Configuration)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_Delete", Id_Task_Configuration);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Task_Configuration)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_Delete", Id_Task_Configuration);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_DeleteByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_DeleteByTASK", Id_Task);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_DeleteByTASK", TASK.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_DeleteByTASK", TASK.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_DeleteByTask" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(DbTransaction transaction , System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_DeleteByTask" , Id_Task);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_ChangeStatus" , Id_Task, ID_STATUS);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(DbTransaction transaction , System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_ChangeStatus" , Id_Task, ID_STATUS);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace SISMONRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class TASK_CONFIGURATIONMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public SISMONRules.Mappers.TASK_CONFIGURATIONMapper Instance()
        {
            return SISMONRules.Mappers.TASK_CONFIGURATIONMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a TASK_CONFIGURATIONEntity by calling a Stored Procedure
        /// </summary>
        public Entities.TASK_CONFIGURATION GetOne(System.Int32 Id_Task_Configuration) {
            return Instance().GetOne( Id_Task_Configuration);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a TASK_CONFIGURATIONList by calling a Stored Procedure
        /// </summary>
        public Entities.TASK_CONFIGURATIONList GetByTASK(System.Int32 Id_Task)
        {
            return Instance().GetByTASK(Id_Task);
        }

        /// <summary>
        /// Get a TASK_CONFIGURATIONList by calling a Stored Procedure
        /// </summary>
        public Entities.TASK_CONFIGURATIONList GetByTASK(IUniqueIdentifiable TASK)
        {
            return Instance().GetByTASK(TASK);
        }

    

       

        /// <summary>
        /// Delete children for TASK_CONFIGURATION
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, TASK_CONFIGURATION entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete TASK_CONFIGURATION by TASK
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            Instance().DeleteByTASK(Id_Task);
        }

        /// <summary>
        /// Delete TASK_CONFIGURATION by TASK
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            Instance().DeleteByTASK(TASK);
        }

    
        /// <summary>
        /// Delete TASK_CONFIGURATION 
        /// </summary>
        public void Delete(System.Int32 Id_Task_Configuration){
            Instance().Delete(Id_Task_Configuration);
        }

        /// <summary>
        /// Delete TASK_CONFIGURATION 
        /// </summary>
        public void Delete(Entities.TASK_CONFIGURATION entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save TASK_CONFIGURATION  
        /// </summary>
        public void Save(Entities.TASK_CONFIGURATION entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert TASK_CONFIGURATION 
        /// </summary>
        public void Insert(Entities.TASK_CONFIGURATION entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll TASK_CONFIGURATION 
        /// </summary>
        public Entities.TASK_CONFIGURATIONList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save TASK_CONFIGURATION 
        /// </summary>
        public void Save(System.Int32 Id_Task_Configuration, System.Int32 Id_Task, System.String Document_Title, System.Boolean Required, System.Byte Id_Status){
            Entities.TASK_CONFIGURATION entity = Instance().GetOne(Id_Task_Configuration);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Id_Task_Configuration", Id_Task_Configuration));

            entity.Id_Task = Id_Task;
            entity.Document_Title = Document_Title;
            entity.Required = Required;
            entity.Id_Status = Id_Status;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert TASK_CONFIGURATION
        /// </summary>
        public void Insert(System.Int32 Id_Task, System.String Document_Title, System.Boolean Required, System.Byte Id_Status){
            Entities.TASK_CONFIGURATION entity = new Entities.TASK_CONFIGURATION();

            entity.Id_Task = Id_Task;
            entity.Document_Title = Document_Title;
            entity.Required = Required;
            entity.Id_Status = Id_Status;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(System.Int32 Id_Task) {
            
                return Instance().DeleteByTask( Id_Task);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte ID_STATUS) {
            
                return Instance().ChangeStatus( Id_Task, ID_STATUS);
        }


        


    }
}





namespace SISMONRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class TASK_CONFIGURATIONLoader<T> : BaseLoader< T, TASK_CONFIGURATION, ObjectList<T>>, IGenericGateway where T : TASK_CONFIGURATION, new()
    {

        #region "Singleton"

        static TASK_CONFIGURATIONLoader<T> _instance;

        private TASK_CONFIGURATIONLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static TASK_CONFIGURATIONLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TASK_CONFIGURATIONLoader<T>();
                else {
                    TASK_CONFIGURATIONLoader<T> inst = HttpContext.Current.Items["SISMONRules.TASK_CONFIGURATIONLoaderSingleton"] as TASK_CONFIGURATIONLoader<T>;
                    if (inst == null) {
                        inst = new TASK_CONFIGURATIONLoader<T>();
                        HttpContext.Current.Items.Add("SISMONRules.TASK_CONFIGURATIONLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Id_Task_Configuration"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(TASK_CONFIGURATION);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "TASK_CONFIGURATION"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, TASK_CONFIGURATION entity)
        {
            
            IMappeableTASK_CONFIGURATIONObject TASK_CONFIGURATION = (IMappeableTASK_CONFIGURATIONObject)entity;
            TASK_CONFIGURATION.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
reader.GetBoolean(3),
reader.GetByte(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.TASK_ATTACHMENTList TASK_ATTACHMENTCollection = null; // Lazy load
Objects.TASKObject TASKEntity = null; // Lazy load
            ((IMappeableTASK_CONFIGURATION)entity).CompleteEntity(TASK_ATTACHMENTCollection, TASKEntity);
        }


        



        /// <summary>
        /// Get a TASK_CONFIGURATION by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TASK_CONFIGURATIONList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Id_Task_Configuration)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_GetOne", Id_Task_Configuration);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_GetByTASK", TASK.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_GetByTASK", Id_Task);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_GetByTASK", TASK.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_DeleteByTask" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(DbTransaction transaction , System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_DeleteByTask" , Id_Task);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_CONFIGURATION_ChangeStatus" , Id_Task, ID_STATUS);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(DbTransaction transaction , System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_CONFIGURATION_ChangeStatus" , Id_Task, ID_STATUS);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





