
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 05/10/2014 - 06:22 p.m.
// This is a partial class file. The other one is ATTACHMENTGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class ATTACHMENTGateway : BaseGateway<ATTACHMENTObject, ATTACHMENTObjectList>, IGenericGateway
    {

        #region "Singleton"

        static ATTACHMENTGateway _instance;

        private ATTACHMENTGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static ATTACHMENTGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ATTACHMENTGateway();
                else {
                    ATTACHMENTGateway inst = HttpContext.Current.Items["SISMONRules.ATTACHMENTGatewaySingleton"] as ATTACHMENTGateway;
                    if (inst == null) {
                        inst = new ATTACHMENTGateway();
                        HttpContext.Current.Items.Add("SISMONRules.ATTACHMENTGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "ATTACHMENT"; }
        }

        protected override string RuleName
        {
            get {return typeof(ATTACHMENTGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ATTACHMENTObject entity)
        {
            
            IMappeableATTACHMENTObject ATTACHMENT = (IMappeableATTACHMENTObject)entity;
            ATTACHMENT.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetString(3),
reader.GetBoolean(4),
reader.GetByte(5));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(ATTACHMENTObject entity)
        {

            IMappeableATTACHMENTObject ATTACHMENT = (IMappeableATTACHMENTObject)entity;
            return ATTACHMENT.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(ATTACHMENTObject entity)
        {

            IMappeableATTACHMENTObject ATTACHMENT = (IMappeableATTACHMENTObject)entity;
            return ATTACHMENT.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(ATTACHMENTObject entity)
        {

            IMappeableATTACHMENTObject ATTACHMENT = (IMappeableATTACHMENTObject)entity;
            return ATTACHMENT.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ATTACHMENTObject row, object[] parameters)
        {
            ((IMappeableATTACHMENTObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a ATTACHMENTObject by execute a SQL Query Text
        /// </summary>
        public ATTACHMENTObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ATTACHMENTObjectList by execute a SQL Query Text
        /// </summary>
        public ATTACHMENTObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a ATTACHMENTObject by calling a Stored Procedure
        /// </summary>
        public ATTACHMENTObject GetOne(System.Int32 Id_Attachment)
        {
            return base.GetOne(new ATTACHMENTObject(Id_Attachment));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a ATTACHMENTObjectList by calling a Stored Procedure
        /// </summary>
        public ATTACHMENTObjectList GetBySTATUS(DbTransaction transaction,System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a ATTACHMENTObjectList by calling a Stored Procedure
        /// </summary>
        public ATTACHMENTObjectList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// Get a ATTACHMENTObjectList by calling a Stored Procedure
        /// </summary>
        public ATTACHMENTObjectList GetByTASK(DbTransaction transaction,System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", Id_Task);
        }

        /// <summary>
        /// Get a ATTACHMENTObjectList by calling a Stored Procedure
        /// </summary>
        public ATTACHMENTObjectList GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", TASK.Identifier());
        }

    

        

        /// <summary>
        /// Get a ATTACHMENTObjectList by calling a Stored Procedure
        /// </summary>
        public ATTACHMENTObjectList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a ATTACHMENTObjectList by calling a Stored Procedure
        /// </summary>
        public ATTACHMENTObjectList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// Get a ATTACHMENTObjectList by calling a Stored Procedure
        /// </summary>
        public ATTACHMENTObjectList GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", Id_Task);
        }

        /// <summary>
        /// Get a ATTACHMENTObjectList by calling a Stored Procedure
        /// </summary>
        public ATTACHMENTObjectList GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// Delete ATTACHMENT
        /// </summary>
        public void Delete(System.Int32 Id_Attachment)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_Delete", Id_Attachment);
        }

        /// <summary>
        /// Delete ATTACHMENT
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Attachment)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_Delete", Id_Attachment);
        }

            

        

        /// <summary>
        /// Delete ATTACHMENT by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete ATTACHMENT by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete ATTACHMENT by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// Delete ATTACHMENT by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_DeleteBySTATUS", STATUS.Identifier());
        }


    

        /// <summary>
        /// Delete ATTACHMENT by TASK
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_DeleteByTASK", Id_Task);
        }

        /// <summary>
        /// Delete ATTACHMENT by TASK
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_DeleteByTASK", Id_Task);
        }

        /// <summary>
        /// Delete ATTACHMENT by TASK
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ATTACHMENT_DeleteByTASK", TASK.Identifier());
        }

        /// <summary>
        /// Delete ATTACHMENT by TASK
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ATTACHMENT_DeleteByTASK", TASK.Identifier());
        }


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








