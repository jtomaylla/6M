
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is TASKGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class TASKGateway : BaseGateway<TASKObject, TASKObjectList>, IGenericGateway
    {

        #region "Singleton"

        static TASKGateway _instance;

        private TASKGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static TASKGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TASKGateway();
                else {
                    TASKGateway inst = HttpContext.Current.Items["SISMONRules.TASKGatewaySingleton"] as TASKGateway;
                    if (inst == null) {
                        inst = new TASKGateway();
                        HttpContext.Current.Items.Add("SISMONRules.TASKGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "TASK"; }
        }

        protected override string RuleName
        {
            get {return typeof(TASKGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, TASKObject entity)
        {
            
            IMappeableTASKObject TASK = (IMappeableTASKObject)entity;
            TASK.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? new System.Nullable<System.Int32>() : reader.GetInt32(1),
reader.GetInt32(2),
reader.GetString(3),
(reader.IsDBNull(4)) ? new System.Nullable<System.Decimal>() : reader.GetDecimal(4),
reader.GetDateTime(5),
reader.GetDateTime(6),
(reader.IsDBNull(7)) ? new System.Nullable<System.Decimal>() : reader.GetDecimal(7),
(reader.IsDBNull(8)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(8),
reader.GetDecimal(9),
(reader.IsDBNull(10)) ? new System.Nullable<System.Boolean>() : reader.GetBoolean(10),
reader.GetBoolean(11),
(reader.IsDBNull(12)) ? new System.Nullable<System.Int32>() : reader.GetInt32(12),
reader.GetInt32(13),
reader.GetByte(14),
reader.GetBoolean(15),
(reader.IsDBNull(16)) ? "" : reader.GetString(16),
reader.GetBoolean(17),
(reader.IsDBNull(18)) ? "" : reader.GetString(18),
(reader.IsDBNull(19)) ? "" : reader.GetString(19));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(TASKObject entity)
        {

            IMappeableTASKObject TASK = (IMappeableTASKObject)entity;
            return TASK.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(TASKObject entity)
        {

            IMappeableTASKObject TASK = (IMappeableTASKObject)entity;
            return TASK.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(TASKObject entity)
        {

            IMappeableTASKObject TASK = (IMappeableTASKObject)entity;
            return TASK.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(TASKObject row, object[] parameters)
        {
            ((IMappeableTASKObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a TASKObject by execute a SQL Query Text
        /// </summary>
        public TASKObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TASKObjectList by execute a SQL Query Text
        /// </summary>
        public TASKObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a TASKObject by calling a Stored Procedure
        /// </summary>
        public TASKObject GetOne(System.Int32 Id_Task)
        {
            return base.GetOne(new TASKObject(Id_Task));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetByPROJECT(DbTransaction transaction,System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetBySTATUS(DbTransaction transaction,System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetByTASK(DbTransaction transaction,System.Int32 Id_Task_Parent)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByTASK", Id_Task_Parent);
        }

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetByTASK", TASK.Identifier());
        }

    

        

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetByPROJECT(System.Int32 Id_Project)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByPROJECT", Id_Project);
        }

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetByPROJECT(IUniqueIdentifiable PROJECT)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByPROJECT", PROJECT.Identifier());
        }

    

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetByTASK(System.Int32 Id_Task_Parent)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByTASK", Id_Task_Parent);
        }

        /// <summary>
        /// Get a TASKObjectList by calling a Stored Procedure
        /// </summary>
        public TASKObjectList GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// Delete TASK
        /// </summary>
        public void Delete(System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_Delete", Id_Task);
        }

        /// <summary>
        /// Delete TASK
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_Delete", Id_Task);
        }

            

        

        /// <summary>
        /// Delete TASK by PROJECT
        /// </summary>
        public void DeleteByPROJECT(System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteByPROJECT", Id_Project);
        }

        /// <summary>
        /// Delete TASK by PROJECT
        /// </summary>
        public void DeleteByPROJECT(DbTransaction transaction, System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteByPROJECT", Id_Project);
        }

        /// <summary>
        /// Delete TASK by PROJECT
        /// </summary>
        public void DeleteByPROJECT(IUniqueIdentifiable PROJECT)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteByPROJECT", PROJECT.Identifier());
        }

        /// <summary>
        /// Delete TASK by PROJECT
        /// </summary>
        public void DeleteByPROJECT(DbTransaction transaction, IUniqueIdentifiable PROJECT)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteByPROJECT", PROJECT.Identifier());
        }


    

        /// <summary>
        /// Delete TASK by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete TASK by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete TASK by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// Delete TASK by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteBySTATUS", STATUS.Identifier());
        }


    

        /// <summary>
        /// Delete TASK by TASK
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task_Parent)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteByTASK", Id_Task_Parent);
        }

        /// <summary>
        /// Delete TASK by TASK
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, System.Int32 Id_Task_Parent)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteByTASK", Id_Task_Parent);
        }

        /// <summary>
        /// Delete TASK by TASK
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TASK_DeleteByTASK", TASK.Identifier());
        }

        /// <summary>
        /// Delete TASK by TASK
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_DeleteByTASK", TASK.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public TASKObjectList GetAllByProject(System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TASK_GetAllByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public TASKObjectList GetAllByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetAllByProject" , Id_Project);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateOwner(System.Int32 Id_Task, System.String Description, System.Decimal Initial_Cost, System.Int32 Alert_Days_From_End, System.Boolean EmailAlert, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_PartialUpdateOwner" , Id_Task, Description, Initial_Cost, Alert_Days_From_End, EmailAlert, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateOwner(DbTransaction transaction , System.Int32 Id_Task, System.String Description, System.Decimal Initial_Cost, System.Int32 Alert_Days_From_End, System.Boolean EmailAlert, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_PartialUpdateOwner" , Id_Task, Description, Initial_Cost, Alert_Days_From_End, EmailAlert, Id_Status);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_ChangeStatus" , Id_Task, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(DbTransaction transaction , System.Int32 Id_Task, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_ChangeStatus" , Id_Task, Id_Status);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateCollaborator(System.Int32 Id_Task, System.Decimal Final_Cost, System.DateTime Final_End, System.Decimal Percent_Complete, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_PartialUpdateCollaborator" , Id_Task, Final_Cost, Final_End, Percent_Complete, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 PartialUpdateCollaborator(DbTransaction transaction , System.Int32 Id_Task, System.Decimal Final_Cost, System.DateTime Final_End, System.Decimal Percent_Complete, System.Byte Id_Status) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_PartialUpdateCollaborator" , Id_Task, Final_Cost, Final_End, Percent_Complete, Id_Status);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 UpdatePercentComplete(System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_UpdatePercentComplete" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 UpdatePercentComplete(DbTransaction transaction , System.Int32 Id_User) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_UpdatePercentComplete" , Id_User);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetAllByUser(System.Int32 Id_User) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(StoredProceduresPrefix() + "TASK_GetAllByUser" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetAllByUser(DbTransaction transaction , System.Int32 Id_User) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetAllByUser" , Id_User);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ReplaceCost(System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "TASK_ReplaceCost" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ReplaceCost(DbTransaction transaction , System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_ReplaceCost" , Id_Task);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetTaskAlerts() {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(StoredProceduresPrefix() + "TASK_GetTaskAlerts" );
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetTaskAlerts(DbTransaction transaction ) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(transaction, StoredProceduresPrefix() + "TASK_GetTaskAlerts" );
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








