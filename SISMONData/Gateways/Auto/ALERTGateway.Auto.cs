
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is ALERTGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class ALERTGateway : BaseGateway<ALERTObject, ALERTObjectList>, IGenericGateway
    {

        #region "Singleton"

        static ALERTGateway _instance;

        private ALERTGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static ALERTGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ALERTGateway();
                else {
                    ALERTGateway inst = HttpContext.Current.Items["SISMONRules.ALERTGatewaySingleton"] as ALERTGateway;
                    if (inst == null) {
                        inst = new ALERTGateway();
                        HttpContext.Current.Items.Add("SISMONRules.ALERTGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "ALERT"; }
        }

        protected override string RuleName
        {
            get {return typeof(ALERTGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ALERTObject entity)
        {
            
            IMappeableALERTObject ALERT = (IMappeableALERTObject)entity;
            ALERT.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetDecimal(3));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(ALERTObject entity)
        {

            IMappeableALERTObject ALERT = (IMappeableALERTObject)entity;
            return ALERT.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(ALERTObject entity)
        {

            IMappeableALERTObject ALERT = (IMappeableALERTObject)entity;
            return ALERT.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(ALERTObject entity)
        {

            IMappeableALERTObject ALERT = (IMappeableALERTObject)entity;
            return ALERT.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ALERTObject row, object[] parameters)
        {
            ((IMappeableALERTObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a ALERTObject by execute a SQL Query Text
        /// </summary>
        public ALERTObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ALERTObjectList by execute a SQL Query Text
        /// </summary>
        public ALERTObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a ALERTObject by calling a Stored Procedure
        /// </summary>
        public ALERTObject GetOne(System.Int32 Id_Alert)
        {
            return base.GetOne(new ALERTObject(Id_Alert));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a ALERTObjectList by calling a Stored Procedure
        /// </summary>
        public ALERTObjectList GetByALERT_TYPE(DbTransaction transaction,System.Int32 Id_Alert_Type)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", Id_Alert_Type);
        }

        /// <summary>
        /// Get a ALERTObjectList by calling a Stored Procedure
        /// </summary>
        public ALERTObjectList GetByALERT_TYPE(DbTransaction transaction, IUniqueIdentifiable ALERT_TYPE)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", ALERT_TYPE.Identifier());
        }

    

        

        /// <summary>
        /// Get a ALERTObjectList by calling a Stored Procedure
        /// </summary>
        public ALERTObjectList GetByALERT_TYPE(System.Int32 Id_Alert_Type)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", Id_Alert_Type);
        }

        /// <summary>
        /// Get a ALERTObjectList by calling a Stored Procedure
        /// </summary>
        public ALERTObjectList GetByALERT_TYPE(IUniqueIdentifiable ALERT_TYPE)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ALERT_GetByALERT_TYPE", ALERT_TYPE.Identifier());
        }

    

        /// <summary>
        /// Delete ALERT
        /// </summary>
        public void Delete(System.Int32 Id_Alert)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ALERT_Delete", Id_Alert);
        }

        /// <summary>
        /// Delete ALERT
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Alert)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_Delete", Id_Alert);
        }

            

        

        /// <summary>
        /// Delete ALERT by ALERT_TYPE
        /// </summary>
        public void DeleteByALERT_TYPE(System.Int32 Id_Alert_Type)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ALERT_DeleteByALERT_TYPE", Id_Alert_Type);
        }

        /// <summary>
        /// Delete ALERT by ALERT_TYPE
        /// </summary>
        public void DeleteByALERT_TYPE(DbTransaction transaction, System.Int32 Id_Alert_Type)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_DeleteByALERT_TYPE", Id_Alert_Type);
        }

        /// <summary>
        /// Delete ALERT by ALERT_TYPE
        /// </summary>
        public void DeleteByALERT_TYPE(IUniqueIdentifiable ALERT_TYPE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ALERT_DeleteByALERT_TYPE", ALERT_TYPE.Identifier());
        }

        /// <summary>
        /// Delete ALERT by ALERT_TYPE
        /// </summary>
        public void DeleteByALERT_TYPE(DbTransaction transaction, IUniqueIdentifiable ALERT_TYPE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_DeleteByALERT_TYPE", ALERT_TYPE.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByAlertType(System.Int32 Id_Alert_Type) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "ALERT_DeleteByAlertType" , Id_Alert_Type);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByAlertType(DbTransaction transaction , System.Int32 Id_Alert_Type) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "ALERT_DeleteByAlertType" , Id_Alert_Type);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








