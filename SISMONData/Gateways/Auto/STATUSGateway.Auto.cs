
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is STATUSGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class STATUSGateway : BaseGateway<STATUSObject, STATUSObjectList>, IGenericGateway
    {

        #region "Singleton"

        static STATUSGateway _instance;

        private STATUSGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static STATUSGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new STATUSGateway();
                else {
                    STATUSGateway inst = HttpContext.Current.Items["SISMONRules.STATUSGatewaySingleton"] as STATUSGateway;
                    if (inst == null) {
                        inst = new STATUSGateway();
                        HttpContext.Current.Items.Add("SISMONRules.STATUSGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "STATUS"; }
        }

        protected override string RuleName
        {
            get {return typeof(STATUSGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, STATUSObject entity)
        {
            
            IMappeableSTATUSObject STATUS = (IMappeableSTATUSObject)entity;
            STATUS.HydrateFields(
            reader.GetByte(0),
reader.GetString(1),
reader.GetString(2));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(STATUSObject entity)
        {

            IMappeableSTATUSObject STATUS = (IMappeableSTATUSObject)entity;
            return STATUS.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(STATUSObject entity)
        {

            IMappeableSTATUSObject STATUS = (IMappeableSTATUSObject)entity;
            return STATUS.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(STATUSObject entity)
        {

            IMappeableSTATUSObject STATUS = (IMappeableSTATUSObject)entity;
            return STATUS.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(STATUSObject row, object[] parameters)
        {
            ((IMappeableSTATUSObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a STATUSObject by execute a SQL Query Text
        /// </summary>
        public STATUSObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a STATUSObjectList by execute a SQL Query Text
        /// </summary>
        public STATUSObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a STATUSObject by calling a Stored Procedure
        /// </summary>
        public STATUSObject GetOne(System.Byte Id_Status)
        {
            return base.GetOne(new STATUSObject(Id_Status));
        }


        // GetBy Objects and Params
            


        

        

        /// <summary>
        /// Delete STATUS
        /// </summary>
        public void Delete(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "STATUS_Delete", Id_Status);
        }

        /// <summary>
        /// Delete STATUS
        /// </summary>
        public void Delete(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "STATUS_Delete", Id_Status);
        }

            

        


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public STATUSObjectList GetAll(System.String Type) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "STATUS_GetAll" , Type);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public STATUSObjectList GetAll(DbTransaction transaction , System.String Type) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "STATUS_GetAll" , Type);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








