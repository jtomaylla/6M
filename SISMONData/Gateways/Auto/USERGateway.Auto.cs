
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is USERGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class USERGateway : BaseGateway<USERObject, USERObjectList>, IGenericGateway
    {

        #region "Singleton"

        static USERGateway _instance;

        private USERGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static USERGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new USERGateway();
                else {
                    USERGateway inst = HttpContext.Current.Items["SISMONRules.USERGatewaySingleton"] as USERGateway;
                    if (inst == null) {
                        inst = new USERGateway();
                        HttpContext.Current.Items.Add("SISMONRules.USERGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "USER"; }
        }

        protected override string RuleName
        {
            get {return typeof(USERGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, USERObject entity)
        {
            System.Byte[] _PasswordHash = new System.Byte[256]; if (!reader.IsDBNull(6)) _PasswordHash = reader.GetValue(6) as System.Byte[];

            IMappeableUSERObject USER = (IMappeableUSERObject)entity;
            USER.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
reader.GetString(3),
reader.GetString(4),
reader.GetString(5),
_PasswordHash,
reader.GetBoolean(7),
reader.GetInt32(8),
reader.GetString(9),
reader.GetByte(10),
(reader.IsDBNull(11)) ? "" : reader.GetString(11));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(USERObject entity)
        {

            IMappeableUSERObject USER = (IMappeableUSERObject)entity;
            return USER.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(USERObject entity)
        {

            IMappeableUSERObject USER = (IMappeableUSERObject)entity;
            return USER.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(USERObject entity)
        {

            IMappeableUSERObject USER = (IMappeableUSERObject)entity;
            return USER.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(USERObject row, object[] parameters)
        {
            ((IMappeableUSERObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a USERObject by execute a SQL Query Text
        /// </summary>
        public USERObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a USERObjectList by execute a SQL Query Text
        /// </summary>
        public USERObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a USERObject by calling a Stored Procedure
        /// </summary>
        public USERObject GetOne(System.Int32 Id_User)
        {
            return base.GetOne(new USERObject(Id_User));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a USERObjectList by calling a Stored Procedure
        /// </summary>
        public USERObjectList GetByORGANIZATION(DbTransaction transaction,System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// Get a USERObjectList by calling a Stored Procedure
        /// </summary>
        public USERObjectList GetByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        /// <summary>
        /// Get a USERObjectList by calling a Stored Procedure
        /// </summary>
        public USERObjectList GetBySTATUS(DbTransaction transaction,System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a USERObjectList by calling a Stored Procedure
        /// </summary>
        public USERObjectList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetBySTATUS", STATUS.Identifier());
        }

    

        

        /// <summary>
        /// Get a USERObjectList by calling a Stored Procedure
        /// </summary>
        public USERObjectList GetByORGANIZATION(System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// Get a USERObjectList by calling a Stored Procedure
        /// </summary>
        public USERObjectList GetByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        /// <summary>
        /// Get a USERObjectList by calling a Stored Procedure
        /// </summary>
        public USERObjectList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a USERObjectList by calling a Stored Procedure
        /// </summary>
        public USERObjectList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// Delete USER
        /// </summary>
        public void Delete(System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_Delete", Id_User);
        }

        /// <summary>
        /// Delete USER
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_Delete", Id_User);
        }

            

        

        /// <summary>
        /// Delete USER by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_DeleteByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// Delete USER by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(DbTransaction transaction, System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_DeleteByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// Delete USER by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_DeleteByORGANIZATION", ORGANIZATION.Identifier());
        }

        /// <summary>
        /// Delete USER by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_DeleteByORGANIZATION", ORGANIZATION.Identifier());
        }


    

        /// <summary>
        /// Delete USER by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete USER by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete USER by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "USER_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// Delete USER by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_DeleteBySTATUS", STATUS.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ValidUser(System.String UserName, System.String PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ValidUser" , UserName, PasswordHash);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ValidUser(DbTransaction transaction , System.String UserName, System.String PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ValidUser" , UserName, PasswordHash);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USERObject GetByEmail(System.String Email) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByEmail" , Email);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USERObject GetByEmail(DbTransaction transaction , System.String Email) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByEmail" , Email);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Boolean IsValidUser(System.String UserName, System.Byte[] PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_IsValidUser" , UserName, PasswordHash);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean IsValidUser(DbTransaction transaction , System.String UserName, System.Byte[] PasswordHash) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_IsValidUser" , UserName, PasswordHash);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangePassword(System.Int32 Id_User, System.Byte[] PasswordHash) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ChangePassword" , Id_User, PasswordHash);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangePassword(DbTransaction transaction , System.Int32 Id_User, System.Byte[] PasswordHash) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ChangePassword" , Id_User, PasswordHash);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USERObjectList GetByProfile(System.Int32 Id_Profile) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByProfile" , Id_Profile);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USERObjectList GetByProfile(DbTransaction transaction , System.Int32 Id_Profile) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByProfile" , Id_Profile);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistMail(System.Int32 Id_User, System.String Email, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ExistMail" , Id_User, Email, Operation);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistMail(DbTransaction transaction , System.Int32 Id_User, System.String Email, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ExistMail" , Id_User, Email, Operation);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USERObjectList GetAllActiveUsers() {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetAllActiveUsers" );
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USERObjectList GetAllActiveUsers(DbTransaction transaction ) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetAllActiveUsers" );
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USERObjectList GetUsersByProject(System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetUsersByProject" , Id_Project);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USERObjectList GetUsersByProject(DbTransaction transaction , System.Int32 Id_Project) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetUsersByProject" , Id_Project);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public USERObject GetByUserName(System.String UserName) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "USER_GetByUserName" , UserName);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public USERObject GetByUserName(DbTransaction transaction , System.String UserName) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "USER_GetByUserName" , UserName);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistUserName(System.Int32 Id_User, System.String UserName, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "USER_ExistUserName" , Id_User, UserName, Operation);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean ExistUserName(DbTransaction transaction , System.Int32 Id_User, System.String UserName, System.String Operation) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "USER_ExistUserName" , Id_User, UserName, Operation);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








