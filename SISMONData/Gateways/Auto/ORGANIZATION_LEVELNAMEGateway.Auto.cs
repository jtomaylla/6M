
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is ORGANIZATION_LEVELNAMEGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class ORGANIZATION_LEVELNAMEGateway : BaseGateway<ORGANIZATION_LEVELNAMEObject, ORGANIZATION_LEVELNAMEObjectList>, IGenericGateway
    {

        #region "Singleton"

        static ORGANIZATION_LEVELNAMEGateway _instance;

        private ORGANIZATION_LEVELNAMEGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static ORGANIZATION_LEVELNAMEGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ORGANIZATION_LEVELNAMEGateway();
                else {
                    ORGANIZATION_LEVELNAMEGateway inst = HttpContext.Current.Items["SISMONRules.ORGANIZATION_LEVELNAMEGatewaySingleton"] as ORGANIZATION_LEVELNAMEGateway;
                    if (inst == null) {
                        inst = new ORGANIZATION_LEVELNAMEGateway();
                        HttpContext.Current.Items.Add("SISMONRules.ORGANIZATION_LEVELNAMEGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "ORGANIZATION_LEVELNAME"; }
        }

        protected override string RuleName
        {
            get {return typeof(ORGANIZATION_LEVELNAMEGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, ORGANIZATION_LEVELNAMEObject entity)
        {
            
            IMappeableORGANIZATION_LEVELNAMEObject ORGANIZATION_LEVELNAME = (IMappeableORGANIZATION_LEVELNAMEObject)entity;
            ORGANIZATION_LEVELNAME.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(ORGANIZATION_LEVELNAMEObject entity)
        {

            IMappeableORGANIZATION_LEVELNAMEObject ORGANIZATION_LEVELNAME = (IMappeableORGANIZATION_LEVELNAMEObject)entity;
            return ORGANIZATION_LEVELNAME.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(ORGANIZATION_LEVELNAMEObject entity)
        {

            IMappeableORGANIZATION_LEVELNAMEObject ORGANIZATION_LEVELNAME = (IMappeableORGANIZATION_LEVELNAMEObject)entity;
            return ORGANIZATION_LEVELNAME.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(ORGANIZATION_LEVELNAMEObject entity)
        {

            IMappeableORGANIZATION_LEVELNAMEObject ORGANIZATION_LEVELNAME = (IMappeableORGANIZATION_LEVELNAMEObject)entity;
            return ORGANIZATION_LEVELNAME.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(ORGANIZATION_LEVELNAMEObject row, object[] parameters)
        {
            ((IMappeableORGANIZATION_LEVELNAMEObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEObject by execute a SQL Query Text
        /// </summary>
        public ORGANIZATION_LEVELNAMEObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEObjectList by execute a SQL Query Text
        /// </summary>
        public ORGANIZATION_LEVELNAMEObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEObject by calling a Stored Procedure
        /// </summary>
        public ORGANIZATION_LEVELNAMEObject GetOne(System.Int32 Level, System.Int32 Id_Organization)
        {
            return base.GetOne(new ORGANIZATION_LEVELNAMEObject(Level, Id_Organization));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEObjectList by calling a Stored Procedure
        /// </summary>
        public ORGANIZATION_LEVELNAMEObjectList GetByORGANIZATION(DbTransaction transaction,System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEObjectList by calling a Stored Procedure
        /// </summary>
        public ORGANIZATION_LEVELNAMEObjectList GetByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        

        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEObjectList by calling a Stored Procedure
        /// </summary>
        public ORGANIZATION_LEVELNAMEObjectList GetByORGANIZATION(System.Int32 Id_Organization)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// Get a ORGANIZATION_LEVELNAMEObjectList by calling a Stored Procedure
        /// </summary>
        public ORGANIZATION_LEVELNAMEObjectList GetByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_GetByORGANIZATION", ORGANIZATION.Identifier());
        }

    

        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME
        /// </summary>
        public void Delete(System.Int32 Level, System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_Delete", Level, Id_Organization);
        }

        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Level, System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_Delete", Level, Id_Organization);
        }

            

        

        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(DbTransaction transaction, System.Int32 Id_Organization)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByORGANIZATION", Id_Organization);
        }

        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(IUniqueIdentifiable ORGANIZATION)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByORGANIZATION", ORGANIZATION.Identifier());
        }

        /// <summary>
        /// Delete ORGANIZATION_LEVELNAME by ORGANIZATION
        /// </summary>
        public void DeleteByORGANIZATION(DbTransaction transaction, IUniqueIdentifiable ORGANIZATION)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByORGANIZATION", ORGANIZATION.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByOrganization(System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByOrganization" , Id_Organization);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByOrganization(DbTransaction transaction , System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_DeleteByOrganization" , Id_Organization);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 OrderPosition(System.Int32 FatherID, System.Int32 SonID, System.String FatherName, System.String SonName, System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_OrderPosition" , FatherID, SonID, FatherName, SonName, Id_Organization);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 OrderPosition(DbTransaction transaction , System.Int32 FatherID, System.Int32 SonID, System.String FatherName, System.String SonName, System.Int32 Id_Organization) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "ORGANIZATION_LEVELNAME_OrderPosition" , FatherID, SonID, FatherName, SonName, Id_Organization);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








