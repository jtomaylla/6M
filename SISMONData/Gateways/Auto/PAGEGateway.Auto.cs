
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is PAGEGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class PAGEGateway : BaseGateway<PAGEObject, PAGEObjectList>, IGenericGateway
    {

        #region "Singleton"

        static PAGEGateway _instance;

        private PAGEGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static PAGEGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PAGEGateway();
                else {
                    PAGEGateway inst = HttpContext.Current.Items["SISMONRules.PAGEGatewaySingleton"] as PAGEGateway;
                    if (inst == null) {
                        inst = new PAGEGateway();
                        HttpContext.Current.Items.Add("SISMONRules.PAGEGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "PAGE"; }
        }

        protected override string RuleName
        {
            get {return typeof(PAGEGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PAGEObject entity)
        {
            
            IMappeablePAGEObject PAGE = (IMappeablePAGEObject)entity;
            PAGE.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? new System.Nullable<System.Int32>() : reader.GetInt32(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
reader.GetString(4),
reader.GetBoolean(5),
reader.GetBoolean(6),
reader.GetInt32(7),
reader.GetByte(8),
reader.GetByte(9));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(PAGEObject entity)
        {

            IMappeablePAGEObject PAGE = (IMappeablePAGEObject)entity;
            return PAGE.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(PAGEObject entity)
        {

            IMappeablePAGEObject PAGE = (IMappeablePAGEObject)entity;
            return PAGE.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(PAGEObject entity)
        {

            IMappeablePAGEObject PAGE = (IMappeablePAGEObject)entity;
            return PAGE.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(PAGEObject row, object[] parameters)
        {
            ((IMappeablePAGEObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a PAGEObject by execute a SQL Query Text
        /// </summary>
        public PAGEObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PAGEObjectList by execute a SQL Query Text
        /// </summary>
        public PAGEObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a PAGEObject by calling a Stored Procedure
        /// </summary>
        public PAGEObject GetOne(System.Int32 Id_Page)
        {
            return base.GetOne(new PAGEObject(Id_Page));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a PAGEObjectList by calling a Stored Procedure
        /// </summary>
        public PAGEObjectList GetByMODULE(DbTransaction transaction,System.Byte Id_Module)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_GetByMODULE", Id_Module);
        }

        /// <summary>
        /// Get a PAGEObjectList by calling a Stored Procedure
        /// </summary>
        public PAGEObjectList GetByMODULE(DbTransaction transaction, IUniqueIdentifiable MODULE)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_GetByMODULE", MODULE.Identifier());
        }

    

        /// <summary>
        /// Get a PAGEObjectList by calling a Stored Procedure
        /// </summary>
        public PAGEObjectList GetBySTATUS(DbTransaction transaction,System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a PAGEObjectList by calling a Stored Procedure
        /// </summary>
        public PAGEObjectList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_GetBySTATUS", STATUS.Identifier());
        }

    

        

        /// <summary>
        /// Get a PAGEObjectList by calling a Stored Procedure
        /// </summary>
        public PAGEObjectList GetByMODULE(System.Byte Id_Module)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PAGE_GetByMODULE", Id_Module);
        }

        /// <summary>
        /// Get a PAGEObjectList by calling a Stored Procedure
        /// </summary>
        public PAGEObjectList GetByMODULE(IUniqueIdentifiable MODULE)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PAGE_GetByMODULE", MODULE.Identifier());
        }

    

        /// <summary>
        /// Get a PAGEObjectList by calling a Stored Procedure
        /// </summary>
        public PAGEObjectList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PAGE_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a PAGEObjectList by calling a Stored Procedure
        /// </summary>
        public PAGEObjectList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PAGE_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// Delete PAGE
        /// </summary>
        public void Delete(System.Int32 Id_Page)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PAGE_Delete", Id_Page);
        }

        /// <summary>
        /// Delete PAGE
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Page)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_Delete", Id_Page);
        }

            

        

        /// <summary>
        /// Delete PAGE by MODULE
        /// </summary>
        public void DeleteByMODULE(System.Byte Id_Module)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PAGE_DeleteByMODULE", Id_Module);
        }

        /// <summary>
        /// Delete PAGE by MODULE
        /// </summary>
        public void DeleteByMODULE(DbTransaction transaction, System.Byte Id_Module)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_DeleteByMODULE", Id_Module);
        }

        /// <summary>
        /// Delete PAGE by MODULE
        /// </summary>
        public void DeleteByMODULE(IUniqueIdentifiable MODULE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PAGE_DeleteByMODULE", MODULE.Identifier());
        }

        /// <summary>
        /// Delete PAGE by MODULE
        /// </summary>
        public void DeleteByMODULE(DbTransaction transaction, IUniqueIdentifiable MODULE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_DeleteByMODULE", MODULE.Identifier());
        }


    

        /// <summary>
        /// Delete PAGE by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PAGE_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete PAGE by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete PAGE by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PAGE_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// Delete PAGE by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_DeleteBySTATUS", STATUS.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public PAGEObjectList GetByPerfil(System.Int32 IdPerfil, System.Int16 IdEstado) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PAGE_GetByPerfil" , IdPerfil, IdEstado);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PAGEObjectList GetByPerfil(DbTransaction transaction , System.Int32 IdPerfil, System.Int16 IdEstado) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_GetByPerfil" , IdPerfil, IdEstado);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Boolean VerifyDependency(System.Int32 Id_Page) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "PAGE_VerifyDependency" , Id_Page);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean VerifyDependency(DbTransaction transaction , System.Int32 Id_Page) {
            
            return (System.Boolean) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_VerifyDependency" , Id_Page);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public PAGEObjectList GetByModulo(System.Int32 Id_Module, System.Byte Id_Status) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PAGE_GetByModulo" , Id_Module, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PAGEObjectList GetByModulo(DbTransaction transaction , System.Int32 Id_Module, System.Byte Id_Status) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_GetByModulo" , Id_Module, Id_Status);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangedParent(System.Int32 IdPadre, System.Int32 IdHijo, System.Int32 IdModulo) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "PAGE_ChangedParent" , IdPadre, IdHijo, IdModulo);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangedParent(DbTransaction transaction , System.Int32 IdPadre, System.Int32 IdHijo, System.Int32 IdModulo) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_ChangedParent" , IdPadre, IdHijo, IdModulo);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public PAGEObjectList OrderPosition(System.Int32 DestinoID, System.Int32 OrigenID, System.Int32 IdModulo, System.Boolean IsBellow) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PAGE_OrderPosition" , DestinoID, OrigenID, IdModulo, IsBellow);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PAGEObjectList OrderPosition(DbTransaction transaction , System.Int32 DestinoID, System.Int32 OrigenID, System.Int32 IdModulo, System.Boolean IsBellow) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_OrderPosition" , DestinoID, OrigenID, IdModulo, IsBellow);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public PAGEObjectList GetByStatus(System.Byte ID_STATUS) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PAGE_GetByStatus" , ID_STATUS);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PAGEObjectList GetByStatus(DbTransaction transaction , System.Byte ID_STATUS) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PAGE_GetByStatus" , ID_STATUS);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








