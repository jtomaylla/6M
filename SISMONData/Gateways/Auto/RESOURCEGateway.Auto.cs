
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is RESOURCEGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class RESOURCEGateway : BaseGateway<RESOURCEObject, RESOURCEObjectList>, IGenericGateway
    {

        #region "Singleton"

        static RESOURCEGateway _instance;

        private RESOURCEGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static RESOURCEGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new RESOURCEGateway();
                else {
                    RESOURCEGateway inst = HttpContext.Current.Items["SISMONRules.RESOURCEGatewaySingleton"] as RESOURCEGateway;
                    if (inst == null) {
                        inst = new RESOURCEGateway();
                        HttpContext.Current.Items.Add("SISMONRules.RESOURCEGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "RESOURCE"; }
        }

        protected override string RuleName
        {
            get {return typeof(RESOURCEGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, RESOURCEObject entity)
        {
            
            IMappeableRESOURCEObject RESOURCE = (IMappeableRESOURCEObject)entity;
            RESOURCE.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2),
reader.GetByte(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(RESOURCEObject entity)
        {

            IMappeableRESOURCEObject RESOURCE = (IMappeableRESOURCEObject)entity;
            return RESOURCE.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(RESOURCEObject entity)
        {

            IMappeableRESOURCEObject RESOURCE = (IMappeableRESOURCEObject)entity;
            return RESOURCE.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(RESOURCEObject entity)
        {

            IMappeableRESOURCEObject RESOURCE = (IMappeableRESOURCEObject)entity;
            return RESOURCE.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(RESOURCEObject row, object[] parameters)
        {
            ((IMappeableRESOURCEObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a RESOURCEObject by execute a SQL Query Text
        /// </summary>
        public RESOURCEObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a RESOURCEObjectList by execute a SQL Query Text
        /// </summary>
        public RESOURCEObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a RESOURCEObject by calling a Stored Procedure
        /// </summary>
        public RESOURCEObject GetOne(System.Int32 Id_Resource)
        {
            return base.GetOne(new RESOURCEObject(Id_Resource));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a RESOURCEObjectList by calling a Stored Procedure
        /// </summary>
        public RESOURCEObjectList GetByTASK(DbTransaction transaction,System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByTASK", Id_Task);
        }

        /// <summary>
        /// Get a RESOURCEObjectList by calling a Stored Procedure
        /// </summary>
        public RESOURCEObjectList GetByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// Get a RESOURCEObjectList by calling a Stored Procedure
        /// </summary>
        public RESOURCEObjectList GetByUSER(DbTransaction transaction,System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByUSER", Id_User);
        }

        /// <summary>
        /// Get a RESOURCEObjectList by calling a Stored Procedure
        /// </summary>
        public RESOURCEObjectList GetByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetByUSER", USER.Identifier());
        }

    

        

        /// <summary>
        /// Get a RESOURCEObjectList by calling a Stored Procedure
        /// </summary>
        public RESOURCEObjectList GetByTASK(System.Int32 Id_Task)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByTASK", Id_Task);
        }

        /// <summary>
        /// Get a RESOURCEObjectList by calling a Stored Procedure
        /// </summary>
        public RESOURCEObjectList GetByTASK(IUniqueIdentifiable TASK)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByTASK", TASK.Identifier());
        }

    

        /// <summary>
        /// Get a RESOURCEObjectList by calling a Stored Procedure
        /// </summary>
        public RESOURCEObjectList GetByUSER(System.Int32 Id_User)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByUSER", Id_User);
        }

        /// <summary>
        /// Get a RESOURCEObjectList by calling a Stored Procedure
        /// </summary>
        public RESOURCEObjectList GetByUSER(IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetByUSER", USER.Identifier());
        }

    

        /// <summary>
        /// Delete RESOURCE
        /// </summary>
        public void Delete(System.Int32 Id_Resource)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_Delete", Id_Resource);
        }

        /// <summary>
        /// Delete RESOURCE
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Resource)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_Delete", Id_Resource);
        }

            

        

        /// <summary>
        /// Delete RESOURCE by TASK
        /// </summary>
        public void DeleteByTASK(System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByTASK", Id_Task);
        }

        /// <summary>
        /// Delete RESOURCE by TASK
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, System.Int32 Id_Task)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByTASK", Id_Task);
        }

        /// <summary>
        /// Delete RESOURCE by TASK
        /// </summary>
        public void DeleteByTASK(IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByTASK", TASK.Identifier());
        }

        /// <summary>
        /// Delete RESOURCE by TASK
        /// </summary>
        public void DeleteByTASK(DbTransaction transaction, IUniqueIdentifiable TASK)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByTASK", TASK.Identifier());
        }


    

        /// <summary>
        /// Delete RESOURCE by USER
        /// </summary>
        public void DeleteByUSER(System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByUSER", Id_User);
        }

        /// <summary>
        /// Delete RESOURCE by USER
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, System.Int32 Id_User)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByUSER", Id_User);
        }

        /// <summary>
        /// Delete RESOURCE by USER
        /// </summary>
        public void DeleteByUSER(IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByUSER", USER.Identifier());
        }

        /// <summary>
        /// Delete RESOURCE by USER
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByUSER", USER.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_DeleteByTask" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 DeleteByTask(DbTransaction transaction , System.Int32 Id_Task) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_DeleteByTask" , Id_Task);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEObjectList GetAllByTask(System.Int32 Id_Task) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetAllByTask" , Id_Task);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public RESOURCEObjectList GetAllByTask(DbTransaction transaction , System.Int32 Id_Task) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetAllByTask" , Id_Task);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public RESOURCEObject GetOne(System.Int32 Id_Task, System.Int32 Id_User) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "RESOURCE_GetOne" , Id_Task, Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public RESOURCEObject GetOne(DbTransaction transaction , System.Int32 Id_Task, System.Int32 Id_User) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_GetOne" , Id_Task, Id_User);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(StoredProceduresPrefix() + "RESOURCE_ChangeStatus" , Id_Task, ID_STATUS);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ChangeStatus(DbTransaction transaction , System.Int32 Id_Task, System.Byte ID_STATUS) {
            
            return (System.Int32) base.DataBaseHelper.ExecuteScalarByStoredProcedure(transaction, StoredProceduresPrefix() + "RESOURCE_ChangeStatus" , Id_Task, ID_STATUS);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








