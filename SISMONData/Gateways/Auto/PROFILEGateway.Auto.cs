
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is PROFILEGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class PROFILEGateway : BaseGateway<PROFILEObject, PROFILEObjectList>, IGenericGateway
    {

        #region "Singleton"

        static PROFILEGateway _instance;

        private PROFILEGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static PROFILEGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PROFILEGateway();
                else {
                    PROFILEGateway inst = HttpContext.Current.Items["SISMONRules.PROFILEGatewaySingleton"] as PROFILEGateway;
                    if (inst == null) {
                        inst = new PROFILEGateway();
                        HttpContext.Current.Items.Add("SISMONRules.PROFILEGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "PROFILE"; }
        }

        protected override string RuleName
        {
            get {return typeof(PROFILEGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PROFILEObject entity)
        {
            
            IMappeablePROFILEObject PROFILE = (IMappeablePROFILEObject)entity;
            PROFILE.HydrateFields(
            reader.GetInt32(0),
reader.GetByte(1),
reader.GetByte(2),
reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(PROFILEObject entity)
        {

            IMappeablePROFILEObject PROFILE = (IMappeablePROFILEObject)entity;
            return PROFILE.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(PROFILEObject entity)
        {

            IMappeablePROFILEObject PROFILE = (IMappeablePROFILEObject)entity;
            return PROFILE.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(PROFILEObject entity)
        {

            IMappeablePROFILEObject PROFILE = (IMappeablePROFILEObject)entity;
            return PROFILE.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(PROFILEObject row, object[] parameters)
        {
            ((IMappeablePROFILEObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a PROFILEObject by execute a SQL Query Text
        /// </summary>
        public PROFILEObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PROFILEObjectList by execute a SQL Query Text
        /// </summary>
        public PROFILEObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a PROFILEObject by calling a Stored Procedure
        /// </summary>
        public PROFILEObject GetOne(System.Int32 Id_Profile)
        {
            return base.GetOne(new PROFILEObject(Id_Profile));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a PROFILEObjectList by calling a Stored Procedure
        /// </summary>
        public PROFILEObjectList GetByMODULE(DbTransaction transaction,System.Byte Id_Module)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_GetByMODULE", Id_Module);
        }

        /// <summary>
        /// Get a PROFILEObjectList by calling a Stored Procedure
        /// </summary>
        public PROFILEObjectList GetByMODULE(DbTransaction transaction, IUniqueIdentifiable MODULE)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_GetByMODULE", MODULE.Identifier());
        }

    

        /// <summary>
        /// Get a PROFILEObjectList by calling a Stored Procedure
        /// </summary>
        public PROFILEObjectList GetBySTATUS(DbTransaction transaction,System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a PROFILEObjectList by calling a Stored Procedure
        /// </summary>
        public PROFILEObjectList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_GetBySTATUS", STATUS.Identifier());
        }

    

        

        /// <summary>
        /// Get a PROFILEObjectList by calling a Stored Procedure
        /// </summary>
        public PROFILEObjectList GetByMODULE(System.Byte Id_Module)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROFILE_GetByMODULE", Id_Module);
        }

        /// <summary>
        /// Get a PROFILEObjectList by calling a Stored Procedure
        /// </summary>
        public PROFILEObjectList GetByMODULE(IUniqueIdentifiable MODULE)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROFILE_GetByMODULE", MODULE.Identifier());
        }

    

        /// <summary>
        /// Get a PROFILEObjectList by calling a Stored Procedure
        /// </summary>
        public PROFILEObjectList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROFILE_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a PROFILEObjectList by calling a Stored Procedure
        /// </summary>
        public PROFILEObjectList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROFILE_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// Delete PROFILE
        /// </summary>
        public void Delete(System.Int32 Id_Profile)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROFILE_Delete", Id_Profile);
        }

        /// <summary>
        /// Delete PROFILE
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Profile)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_Delete", Id_Profile);
        }

            

        

        /// <summary>
        /// Delete PROFILE by MODULE
        /// </summary>
        public void DeleteByMODULE(System.Byte Id_Module)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROFILE_DeleteByMODULE", Id_Module);
        }

        /// <summary>
        /// Delete PROFILE by MODULE
        /// </summary>
        public void DeleteByMODULE(DbTransaction transaction, System.Byte Id_Module)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_DeleteByMODULE", Id_Module);
        }

        /// <summary>
        /// Delete PROFILE by MODULE
        /// </summary>
        public void DeleteByMODULE(IUniqueIdentifiable MODULE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROFILE_DeleteByMODULE", MODULE.Identifier());
        }

        /// <summary>
        /// Delete PROFILE by MODULE
        /// </summary>
        public void DeleteByMODULE(DbTransaction transaction, IUniqueIdentifiable MODULE)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_DeleteByMODULE", MODULE.Identifier());
        }


    

        /// <summary>
        /// Delete PROFILE by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROFILE_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete PROFILE by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete PROFILE by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROFILE_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// Delete PROFILE by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_DeleteBySTATUS", STATUS.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public PROFILEObjectList GetByUser(System.Int32 Id_User, System.Int32 Id_Module, System.Int16 Id_Status) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROFILE_GetByUser" , Id_User, Id_Module, Id_Status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PROFILEObjectList GetByUser(DbTransaction transaction , System.Int32 Id_User, System.Int32 Id_Module, System.Int16 Id_Status) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_GetByUser" , Id_User, Id_Module, Id_Status);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public PROFILEObjectList GetByStatus(System.Int32 status) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROFILE_GetByStatus" , status);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PROFILEObjectList GetByStatus(DbTransaction transaction , System.Int32 status) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_GetByStatus" , status);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public PROFILEObjectList GetAllByModulo(System.Int32 Id_Module) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROFILE_GetAllByModulo" , Id_Module);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PROFILEObjectList GetAllByModulo(DbTransaction transaction , System.Int32 Id_Module) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_GetAllByModulo" , Id_Module);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetOneComplete(System.Int32 Id_Profile) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(StoredProceduresPrefix() + "PROFILE_GetOneComplete" , Id_Profile);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public DbDataReader GetOneComplete(DbTransaction transaction , System.Int32 Id_Profile) {
            
            return base.DataBaseHelper.ExecuteReaderByStoredProcedure(transaction, StoredProceduresPrefix() + "PROFILE_GetOneComplete" , Id_Profile);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








