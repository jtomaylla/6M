
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is PROJECTGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using SISMONRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace SISMONRules.Gateways
{

    public partial class PROJECTGateway : BaseGateway<PROJECTObject, PROJECTObjectList>, IGenericGateway
    {

        #region "Singleton"

        static PROJECTGateway _instance;

        private PROJECTGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static PROJECTGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PROJECTGateway();
                else {
                    PROJECTGateway inst = HttpContext.Current.Items["SISMONRules.PROJECTGatewaySingleton"] as PROJECTGateway;
                    if (inst == null) {
                        inst = new PROJECTGateway();
                        HttpContext.Current.Items.Add("SISMONRules.PROJECTGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "PROJECT"; }
        }

        protected override string RuleName
        {
            get {return typeof(PROJECTGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PROJECTObject entity)
        {
            
            IMappeablePROJECTObject PROJECT = (IMappeablePROJECTObject)entity;
            PROJECT.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetInt32(2),
reader.GetByte(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(PROJECTObject entity)
        {

            IMappeablePROJECTObject PROJECT = (IMappeablePROJECTObject)entity;
            return PROJECT.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(PROJECTObject entity)
        {

            IMappeablePROJECTObject PROJECT = (IMappeablePROJECTObject)entity;
            return PROJECT.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(PROJECTObject entity)
        {

            IMappeablePROJECTObject PROJECT = (IMappeablePROJECTObject)entity;
            return PROJECT.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(PROJECTObject row, object[] parameters)
        {
            ((IMappeablePROJECTObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "sm_";
        }


        /// <summary>
        /// Get a PROJECTObject by execute a SQL Query Text
        /// </summary>
        public PROJECTObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PROJECTObjectList by execute a SQL Query Text
        /// </summary>
        public PROJECTObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a PROJECTObject by calling a Stored Procedure
        /// </summary>
        public PROJECTObject GetOne(System.Int32 Id_Project)
        {
            return base.GetOne(new PROJECTObject(Id_Project));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a PROJECTObjectList by calling a Stored Procedure
        /// </summary>
        public PROJECTObjectList GetBySTATUS(DbTransaction transaction,System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a PROJECTObjectList by calling a Stored Procedure
        /// </summary>
        public PROJECTObjectList GetBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// Get a PROJECTObjectList by calling a Stored Procedure
        /// </summary>
        public PROJECTObjectList GetByUSER(DbTransaction transaction,System.Int32 Id_Owner)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_GetByUSER", Id_Owner);
        }

        /// <summary>
        /// Get a PROJECTObjectList by calling a Stored Procedure
        /// </summary>
        public PROJECTObjectList GetByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_GetByUSER", USER.Identifier());
        }

    

        

        /// <summary>
        /// Get a PROJECTObjectList by calling a Stored Procedure
        /// </summary>
        public PROJECTObjectList GetBySTATUS(System.Byte Id_Status)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROJECT_GetBySTATUS", Id_Status);
        }

        /// <summary>
        /// Get a PROJECTObjectList by calling a Stored Procedure
        /// </summary>
        public PROJECTObjectList GetBySTATUS(IUniqueIdentifiable STATUS)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROJECT_GetBySTATUS", STATUS.Identifier());
        }

    

        /// <summary>
        /// Get a PROJECTObjectList by calling a Stored Procedure
        /// </summary>
        public PROJECTObjectList GetByUSER(System.Int32 Id_Owner)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROJECT_GetByUSER", Id_Owner);
        }

        /// <summary>
        /// Get a PROJECTObjectList by calling a Stored Procedure
        /// </summary>
        public PROJECTObjectList GetByUSER(IUniqueIdentifiable USER)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROJECT_GetByUSER", USER.Identifier());
        }

    

        /// <summary>
        /// Delete PROJECT
        /// </summary>
        public void Delete(System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROJECT_Delete", Id_Project);
        }

        /// <summary>
        /// Delete PROJECT
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Id_Project)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_Delete", Id_Project);
        }

            

        

        /// <summary>
        /// Delete PROJECT by STATUS
        /// </summary>
        public void DeleteBySTATUS(System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROJECT_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete PROJECT by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, System.Byte Id_Status)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_DeleteBySTATUS", Id_Status);
        }

        /// <summary>
        /// Delete PROJECT by STATUS
        /// </summary>
        public void DeleteBySTATUS(IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROJECT_DeleteBySTATUS", STATUS.Identifier());
        }

        /// <summary>
        /// Delete PROJECT by STATUS
        /// </summary>
        public void DeleteBySTATUS(DbTransaction transaction, IUniqueIdentifiable STATUS)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_DeleteBySTATUS", STATUS.Identifier());
        }


    

        /// <summary>
        /// Delete PROJECT by USER
        /// </summary>
        public void DeleteByUSER(System.Int32 Id_Owner)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROJECT_DeleteByUSER", Id_Owner);
        }

        /// <summary>
        /// Delete PROJECT by USER
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, System.Int32 Id_Owner)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_DeleteByUSER", Id_Owner);
        }

        /// <summary>
        /// Delete PROJECT by USER
        /// </summary>
        public void DeleteByUSER(IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PROJECT_DeleteByUSER", USER.Identifier());
        }

        /// <summary>
        /// Delete PROJECT by USER
        /// </summary>
        public void DeleteByUSER(DbTransaction transaction, IUniqueIdentifiable USER)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_DeleteByUSER", USER.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public PROJECTObjectList GetProjectsByUser(System.Int32 Id_User) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROJECT_GetProjectsByUser" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PROJECTObjectList GetProjectsByUser(DbTransaction transaction , System.Int32 Id_User) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_GetProjectsByUser" , Id_User);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public PROJECTObjectList GetAllIfUserIsOwner(System.Int32 Id_User) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PROJECT_GetAllIfUserIsOwner" , Id_User);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PROJECTObjectList GetAllIfUserIsOwner(DbTransaction transaction , System.Int32 Id_User) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PROJECT_GetAllIfUserIsOwner" , Id_User);
            
        }


        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








